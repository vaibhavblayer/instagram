%!PS-Adobe-2.0
%%Creator: dvips(k) 2022.1 (TeX Live 2022)  Copyright 2022 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Sat May 21 18:11:46 2022
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 324 324
%%DocumentFonts: SFTT1000 MathDesign-UT-Regular-Extension-10
%%+ MathDesign-UT-Regular-OT1-10 Utopia-Regular
%%+ MathDesign-UT-Regular-Italic-MathItalic-10 Utopia-Italic
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -o main-pics.ps main.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2022.05.21:2341
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 2019-2022 The LaTeX Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
/color.sc { } def
TeXDict begin
/TeXcolorseparation { setcolor } def
end
true setglobal
/pdf.globaldict 4 dict def
false setglobal
/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 317 2021-11-16 20:47:25Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.41, 2021/11/16
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
revision 952 gt 
{
    systemdict /.setopacityalpha known not 
      { 
         (\n\n%%%% WARNING: Transparency operations ignored - need to use -dALLOWPSTRANSPARENCY\n\n) print flush
         /.setopacityalpha { pop } bind def 
         /.setshapealpha { pop } bind def 
         /.setfillconstantalpha { pop } bind def 
         /.setstrokeconstantalpha { pop } bind def 
      }
      {
        /.setopacityalpha /.setfillconstantalpha load def 
%        /.setblendmode { pop } def   %% works again    hv 20210825
        /.setshapealpha {dup .setfillconstantalpha .setstrokeconstantalpha true .setalphaisshape } def  
      } ifelse
}
{
  systemdict /.setopacityalpha known not 
  { 
    (\n\n%%%% WARNING: Transparency operations ignored - need to use -dNOSAFER\n\n) print flush
    /.setopacityalpha { pop } bind def 
    /.setshapealpha { pop } bind def 
  } if
} ifelse
%
%%<bool> .setalphaisshape -
%%    If true, the values set by setstrokeconstantalpha and setfillconstantalpha are interpreted as shape values. The initial value of the AIS flag is false. 
%
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/fill@Dict 30 dict def				% the fill dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/addCoors { 
  3 -1 roll 		% xA xB yB yA
  add			% xA xB yB+yA
  3 1 roll 		% yB+yA xA xB
  add			% yB+yA xA+xB
  exch                  % xA+xB yA+yB
} def
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (original)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
%
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  10 dict begin
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
  end
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  40 dict begin
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
    { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
  end % userdict
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  50 dict begin
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
  end % userdict
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/ArrowT { % like tikz
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
  w 2 mul /w exch def
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
%  w neg Inset neg rlineto % move to x=0 and inset
%  CLW SLW
%  1 0 0 setrgbcolor
  2 setlinejoin
  stroke
  0 0 moveto
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
%  5 dict begin
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
%  end
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid {
  40 dict begin 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul         %	\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { i dx mul dup xGridOffset add y0 moveto % draw the lines
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  /i x1 def 
  GridDX div ceiling cvi 
  { i dx mul GridDX mul dup xGridOffset add y0 moveto % plot the labels
    b 0 gt 
      { gsave c i GridDX mul a cvs dup stringwidth pop /z2 ED  
        w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse exch GridDX div z2 2 div sub exch 
        rmoveto show grestore } if 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  dup % run loop two times: lines and labels
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  /i y1 def 
  GridDY div ceiling cvi
  { newpath i dy mul GridDY mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i GridDY mul a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse GridDY div b 2 div sub
      rmoveto show grestore } if 
    /i i h add def 
  } repeat 
  grestore 
  end
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /RotAngle ED 
  RotAngle Rot /RAngle [ RAngle dup RotAngle add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 4 2020-06-09 08:32:19Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 249 2021-09-14 10:22:55Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
  4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
  end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  1 dict begin
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
  end
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 291 2021-10-01 09:22:45Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 0.02,  2021/10/01
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
12 dict dup begin
/FontType 1 def
/FontName /PSTricksDotFont def
/FontInfo 9 dict dup begin
/version (001.000) def
/Notice (Timothy Van Zandt <tvz@Princeton.EDU>

This program can be redistributed and/or modified under the terms
of the LaTeX Project Public License Distributed from CTAN archives
in directory macros/latex/base/lppl.txt.

Modified by Etienne Riga  - Dec. 16, 1999
Modified by Etienne Riga  - 2005/01/01 (er) to add /Diamond, /SolidDiamond and /BoldDiamond
Modified by Herbert Voss (hv) - 2008/04/17 
Converted to OpenType by Marcel Krueger 2021
) def
/FullName (PSTricks Dots) def
/FamilyName (PSTricksDotFont) def
/Weight (Regular) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put } for
dup 65 /BoldAdd put
dup 67 /BoldCircle put	% 67
dup 68 /BoldDiamond put
dup 69 /SolidOtimes put
dup 70 /BoldOctogon put
dup 71 /SolidHexagon put
dup 72 /BoldHexagon put
dup 73 /BoldBar put
dup 74 /SolidAsterisk put
dup 75 /BoldAsterisk put
dup 77 /BOplus put
dup 78 /BOtimes put
dup 80 /BoldPentagon put
dup 83 /BoldSquare put
dup 84 /BoldTriangle put
dup 88 /BoldMul put
dup 97 /Add put
dup 98 /Bullet put
dup 99 /Circle put
dup 100 /Diamond put
dup 101 /SolidOplus put
dup 102 /Octogon put
dup 103 /SolidOctogon put
dup 104 /Hexagon put
dup 105 /Bar put
dup 107 /Asterisk put
dup 108 /SolidDiamond put
dup 109 /Oplus put
dup 110 /Otimes put
dup 112 /Pentagon put
dup 113 /SolidPentagon put
dup 114 /SolidSquare put
dup 115 /Square put
dup 116 /Triangle put
dup 117 /SolidTriangle put
dup 120 /Mul put
readonly def
/FontBBox {-572 -743 572 743} def
end
currentfile eexec BAB431EA06BB0A1031E1AA11919E714AC69FC5B91315E2
3949B468EA8965C09E14B93FD8F0A9A9B4A0240775693C371C9F5E8CFB4752C5
B8C3907EB8B475C65DEE88EC0510BC599D0660C41C842A3CCA793376ECDB36BF
799EB8631B5A08846013BAF4256252AF16B24E3BEE4C45F8AE9AEC40351B49C3
CC0B1DFA717674CDC7A3BEA5CE689121348DBBD82720A92C2D68DB27F03F105D
87587E74605E01EDE24B0539FAACD5311070E7BE0BDC57182DA408ED060B7B6B
964AE3EED6C8F348F298B28987B635D1332B77CC33F0B6BF682193B93CE93416
64F638070894F299603700A95B876A3FE5CEFD5BD19928E5DB60E0FB25969A26
05A6651F04B60470D0CE8E37C50EF9350CE0A4EA9F5251F0E9A1B7ACEAE4DFF7
40578E61DA30D0C9067954E23DA81539D0601CCB3FB78040200CE8A1B1E2B4BE
E6BA8FC9121F04EB916D5F9D98C77AE10A51F451B440230C23077251E29FC6E4
2844FC17F11EE282266DEC3A15C96832E595773ADA1A48330AEE455DC4A2805A
C7C7CA085D16113F30AF3EFCFFE079C45CB512DBF81EBD6137314545CA6CE891
19B42A3518E28989CA7DB1DB6F28ED3CB0E9F227A023660A46D14CF05E197E23
3015D9046635F59924C00F5EBC3561132B94C23E91D3AA1EB997B9F486C8793C
E2B8B9224C2C13AEE4AF9AA6E2FF96FFE84223ED1A902C38AD739E0C863A3A37
0482E2F28EB620257113D8EFBE63FCCD181158CC92CFA474170798746B73808F
8D4CB2A16B5BED0ACE4673AACD1484A8CF1F437F58D478A2CFBDA394851AE87F
E8E488302B346131EE903FFF22B882624BD2EF1381761C1FE4BAD1E701CA9C4F
F34AC1E9F9EC27E673FA78703FFB2432FDCD62AE52DE02D55580636F347297C4
A74D04EB5FF11D31D3D04EB580E6C54F88A817049249B0749FAEBF78C4A3CE4A
3F375E7C57D35D8CCA7810BFC7C0F4D4F14F8A29EF000D2BA97AAB26D48D50D7
CFA8E3586105575D14DD80F3D2022373F802C98A78E465F7688C9952848876D4
D7BECAD0FAFBA4674944BEAFA75ED8A87873439FDA03B482FF60B84007FCA6C0
1A04B7C8BF346E30BB6D838EA08FAFF3A3D331527459C665264B9E07A7262419
E0AF9F0AB9897891BF0CB656FE222587FC8890C3FF9D848ED557732CBD2865E0
F4838A6C6E5D794F7781359855ABBD8B2BA63EF2190D930D20C74E9088BBB9BA
62865A174D03BF90A0959079C28DA220598AD0A960C66697A49513D3F152C306
0A9E3133F750EFCDD43E34492A65321EE3B08F904968BB642D3E46DFAF2697CF
52589695642631DEAC79C3B4DD9DE61885901D9465B538643F60FC1B46D83DC4
2D6AB7AEF088D43531C4CB5957A74FCEA04E4BB05B5AF68BCF316C62F7A26CB7
88C6CCFC7859DB9915626FEE3C95F6FA3777B3F6ACE5271BF3309B0A41AF9853
5866F4EBABF5CBFA2D3F411BFB2C3B66962102B183B281FABFF17CBE2A744CE6
A8CB6E1B3D624A68104A7E43F20483622B9C93D8803D71C5ABD930DA44DD6177
F6F411619A130954C54D3BDC24E66A4EE2B3F6C7EA40167FF6E21CA13DF3E903
3E88F8F46C5CDB75E816EA0235669625A772779079CABC8DA76AFBBBC1C15EF3
5695EB0FD46E34C3FE121CC29F7FDA3384B0F1292087CBCB9CBD7B2377AC0F76
5BE0CD3485F2FCD3C6C0012125C273B48900E5200008B21F6DB9F4D4E8027E7B
34265E1FFBC9666A2678CEBA46AE908BDADA630B135683D4F66934702F939912
EDFF3EE524B38F25A0E12239EA471DC4A90814D38747EEF125FA30BBA9998119
A1499E6E6BC26ED39814B64D04D500C2E14A062125A7E4AE9985BEDB6C4A800B
D37D8F13274B28F86D73600A165214E1A8F0F787C92B3ACFC274A34EE064732B
BAB298F0DD452B3DA4E230624FA5296C7ED8A464C5E7D31E0A9C88FD767D4C6F
E2348CE16CAAE803DBA21AF5B8A44ED8B92ADB9C07D422878C63EA6163DFFA5B
FD8AD97240D760FB6667DF08A0F16FB66B2934E64A39C0D82535FC1ABC3C28F6
DD83851928AE495312AFE7F0B7C3D0990D7725B54B0D8644C01CF2BD29340E92
FDCC5D221298669CBD1F842A1BF45D59D4BCC425E3D7FECB69AEF5FF54E86B80
A6011AA0ACD1D286F7BD2CC6F995355E214BEA9DA0696F3D436BAB29C2328173
4661158DBB87A777A8C0FECA5B1DEC07197BADE6B65EBC7152E119BD58204353
4C4793FA4566107EFFF912A0E03255C11824CD079923F7296DB156A8C9134BF4
E573795C7C720A3CDBFF693602A141D436B2F7495B01F6FBA43ED1CB444AEAD2
400638034AA4D95EF5849E61EF2068A4848A27FA16EC8931456000E61E1181BF
545AD271F9D10C60C6AE8616B12998B08270B9E29464DE2725F61EC431C7023D
FB012FFB2DB2EAA1C61C06519BCD8114331FF644B79E9E96E21720B38098D513
59BF4CA62716A9289C555C1B5C05D68F762B5B2E0B9BE7F67D9EFB20B8A0A898
4DE73C07853DAD10A8805E5844A36027E2AECF4F10CA66BFAFEC17DD1CC93373
547071168AF5018B0B6A40E606207ECFE146DE6F8881F969E06207A973DF290D
29E325B6D59F363A5F4105AFDDF24CD4FABAE1B5E784638F3EB2E67C88879F69
00101C3F6DF95D7F81E6E3FE732DCC175F1FEE41D87120F52AB5EA54FD2E1666
CFA5D665F9B97531D74B56CEB8A9E1417A58C1790ABEB68F2F1B49EEB34D24B2
855294A892EC5C92D090BB460AD8844E85E25094B7CE117F343A856F27CEEB36
1CC7AC29D4048E6ACC5947AE7FB937807AC29E65353D20A57E461AC33EEBC75C
24068278B586B33A5E534B1A9ABAAFF492250074EA4CF3EF0818D8F0BA0C7428
40BF46DFCC9711A0420413D0667C7361C8ED428BC510616C34AB28BCC9ABA6F2
43F08A2FCCFC5D1BAA77AE90BF0E296E2C3A99268D7906AE12CDCEA5CE8B5FC9
5A75526CC0B72C7E122C2ED67153BC9AE380DF04FE51E7B0C5AE4363D95DC730
AD0EF34542C179668A9D5807AA22256ADED921E8711E673C67CB5086D7563C98
2A6C681813E07A8E7440FE562EEF08661E1D9CB5761595B515DEC347F0DC84AA
1B3C272792F2D9B4B11C5EA50F7584C7D931BF5BA1A39F635C87CEC31BD22D64
10F7855D66EC86193FFA19ADD7880BCE5588D2322071D443F47D6B4F3F66CE68
4B87D99A5A0D375535D153353DA6E154FF78F458A671CBE1E7136C16435BF244
6E60705C79C82EB5D40934AD496FB08999EFC6E52E56C0106E39603F25D3B946
A7850B4A4EF56B1E5CA32021F191236EA0FB315DC37D708115765F85B668D051
D49167E374DFA9078D128E745F1583EF885F6614D0D1CE1F3F27571B5C68451F
38BDD4758A54A3C6F8ADB3DC20CE95DA5B22C77227CD8EA53C51A643250FA288
4DA7B6F3D93EA1C82B6639B6090352F6E4ACD6A478701D88F8591F71ECB15CEC
FE6FA0C4C049FE9F04612DEB944271F1EA167B2103D69C11E5B6C66CB8C859FE
8DBF7D2E4B26FDE68CFE085B61212906AB7B4E4DC2FB44E8B035DC6938B09632
5C2AFE3B1742756E1DDE8E2D16D957B07713C650928ABFD08BB5BA216086D699
797884E3D06F0096BDE68F929F9FCC4E5819320BF62AA75686A8EF7A11B33281
2477A82B9B0D3B71E8AD3CD41388A69C33B7A4482BF2345419DA669BB7544636
CEF7C14F8C55620724B05B7EDA33584D9CA46B697EFE6CF01B6152DAF28F42CD
DFABA3788B04D5A3AF493625E3387AFCAFE7EFDC62F4A31CA69E7563ECC5F919
91763C850EE7F7B6A979DB2955BA8E4BCA4039D2F083DB3B256F68BB34624CDE
2A745010D76C85300691A0DABBE33109721FAFF7C9BF7D9B2E0F1F9CF5C76676
02A9C95488976ED8956EC9C1B9A9F3CE3B0F7E2DF387DF831C855D9E21908376
BCEFB52FFBA0AD0F9B56CE4043643BC582750110B16399281C79183A8D693AD8
A961C6DE94A882D27A0D9806A5D0ACFC29180CC21E375BA98DAA4C6043EC4532
937C4870CB65365D2CF81C66A72841E189EE4BC12F8882AF0652D0EE3DA63D1F
010248A498F3809036D1FBB712F2D78CE71E0C9AA2BB3A55094E4FAAB574A474
5B153A3D4AD4ED347819033CD288FAD39E440D2FA03630F9529E50BF1E6A51CB
309A34CCCEAEE87C8B3DFDFB81A9B3F0D36DCA6AC69588F51F29BB83015E3244
5C666CC22DC85F7A86FD1D0311A8D8D1F399F87B2859E66C9432E8C14E04585C
A01642BEEAAA975AE4D7977D40FBC85D4B8F40646721A9F38E916C226EB2C045
04EEB6027C835EC0F0F8091EA0250404BE75563D44B40A5D67C1A122E9E9DF7A
5692F8902FDAEED37EB2C430AD36E021CF56CA560B77137710090D8685624CAD
9E6BFDF5BB2FF6147A65F164ED0490E1126D67FE1A93D5E77275FA925CE8666B
E8FF666F97E3101881467A955FDC9864C9B85E943918D4C22F84391D35DBBD14
2EE39F130DB83BA304C931113287A3F7CA042128135D9AF672319B1C3C1FBD59
80BE72F051D6A6FC34174C461A77F000F446E594CE046052A571505F0E4922EF
04A8185830D6D47E006F893973CE8740FC82F77CCD5B2CEF7DBAA9D2A0EFBFA3
2B0A73412A362977B01FCDC95FC8E0B920D884FF7E40FE9AFDB683776B95487B
F096B4BBBA2BED724ECE2CD766C8D83E28FD65924942AA4A3064AC3D5A322D86
3A4D41DBC2F5C6E21C2184CEECE1101A10F8290CBF0D4116EA1C1DB8988785FF
E50B066A4C21E99AA660872A5EEAC307C7794B303EE066C57594AE2389DBEA5E
85CDD9D314CF686811C2022E8E0EBBA0B699EB0405FD2426EA4D698CB4757B6C
53E65BB5D42C65C7A9DA515DA23CB3834C89F769154447BE2D92229016235658
4F40E982A14EB4E6BACC81313C8E0A74A19FD184B1364CA275FC6A62A8709428
BA35305F02331212B45B9268D582A8B638B430BD0A51C607D4C4FD862F0E591C
1A1273650BBE5DA16CE10C98F5209A7C998877BE8F57DEB4D9AA46CC2EF71588
0EDBD79F25594D516AD74C54762FD393D4810EBC8AAF10F821DCFE8D503B37D5
6AF14F0FA57DA3A3365EF38470C1F0BCD693378BA20DF34D263165841DF96F90
32FCB81A44BAF77D3C294697CC8CC971B555F94E768A275A154D63E71A1D6C67
CFDC729E86FB9315B9234D2AB1D6529BFD0D4C852C5438D368B350D8420DCD34
4A164EAC0AE99AC9A2D07A1F77D2E68255EC3F7448F10DABF969653D21590661
2B1DE5DF11BEFA41CECFB00C9A6A7AE3808009E41E2B933C6AA50E1E9BC8AE00
651C8AEFC9FCE6E647FB5D6032000CF87663510D97C12386227E58DD71FD4228
A070BE013F86155C46C8F96D3CF1DE07D60DA3D0E05C3B4A6B5FBAD168B06A50
30738754199245C8AF782F76C58A8F638A2D85CC51309C866729297E3CFC075D
6F9ABB484C5D1D307E06D6ADEFC769E5F51E389520288843F373B71B233E8B96
E59A7053D1D7E17972EDFCBD700A001EBE7759818EECC03353EB0B990EE6DA34
8C65B5092EF565AE325B00DFA892FF2E7217990F6020AEB57974D38E31F97183
FFB436B7DD8C18A80EB7D43D1EFB9A8D3EA99E77F65AD1443AB10857C44B7AB8
2EB0BE22CE0CDDE525B9DE03251E192A3B436C3907AC59EA40BBB63A5A7DC56B
DF08035260ADE398AD7ED78F895AE0CE0ADC74F4BCF4FD9ABEEBE132A537D788
B884084A69BEAD6791D7458A0BC58635A1576F368FA8D2D99DCB6C31BE97F432
5FF313DDA4B7411296716D32049D31F8E85C7D4B4DAE656AEFF8B7B8C1053A57
F13B93F29800E250C98BA58B6061AE740762F9202122F156852A326C13F3675A
4FE680CB4FD1B94C875840A97F2D14D6C1EFD4D4C37F39752572225377072C53
6854A002922441AF733B6F90EFF39E37E1605AC5A3F4B45F66DFC2357B57CF40
263D66A21EE0F0C1D1A0E4BA12454F9A252CAF55B46F5A907DF9D94650DA1D5C
4CBE7E65DE6BC996F52CEC6A02D4D987D99F7B66A1C786E9463A5628A50F5163
02A7F1CDDA1FB3337774AD640B02D504018E7C11267BEB7F51B8AC2FB3326EB5
1EF125B3AA855B3AF7891595077B9FD5960896A022BC3CB4F97F4CC175F09B81
128452C576CB26479E769DE0B75150360EF0C2AD3530A8A3B0C61005BD13EBB8
4F6A707A8D1565529BC1ABE78FBFBEBAB170ECD6908CCD31FA33368E485DCBF5
24DAC34619A38FBDA43C886FC6B4D58C7349C6D577D3AB8DF830F3DC3E06BE4F
8D1283533AE54551513735E278DC928869953AE85693870179055B8D953A8062
0339D4FC9D3DCE68C408FBDE261FAC68438ACFFC7E0F12168B91ECF56ADEEF93
FF6A2D2AE5D35CB0B49BCDED51EF5B16B6A7364D38592BE0EC092C66309F6D0E
E9E73D7AC69A9F9F8C83B5D7352E92D27751D149F552DF5ED5825A79507C5C8A
725E19E744631C96C74EC15829092BE11AB890C9AFBFF608B4F3B5FB42B29F1B
DA5436480A26657A2EBA297FD9933FC6B0071E62551C1A6398F82B097726E06F
4EAC8ECD5C4B316AF63B64A131F3EDFC50F1141E56EE81CB44A03B0CE8B6CC4C
B9E6DF9F47E957E47D4C5C51508C0825537EADCE33E9C3432AA0C0E7890FCFAA
54E1D95E922165EAECC89E7E18A7E36A269D68D918B4E64246066C88F009D478
D17DEAD4CE93F288531DA3CDD4F0B040CC82544B95E6EA26F002357CCF6E3D7D
F52FF5C84DB56CAE8F64D9DE498A54C28558E34F2EBCB8CD3F3F2AB2531D3D74
6A1DC97F93E312DC04158ABA06E9E55BE5A8DE5E0F3D8087188C8055B4C6B7F1
AC373AB1563F756E269BF3D90BDFB9EF3E62E610906E1928A4FF14665EC4DF2F
1703DEDC813E3BD7EFC9CDAD47E0DAF19D2C0701F2C027AE2986BE7715E0B0F4
15D4501FC252AB0608A9BF79FC085AE7F9340C073817296A900E1AB7033D4FD5
21AB67D4AD5E29DC4F20283A7864A4D6CA60908CE2D544E7C3C894A5635FDB42
989443A0DB0AC9281BA74DD27B1B573911DF90AE01984A865A3DB95125594779
C77DFFEB5699712598DD86F94CD032D14E0B71A92890D3EDE1443A3E30968AC6
33A004ACE18A56520853F64A4244C7B479530A8C5D18E47B38D67BB508A58710
6B5753081BF59EDC0793542987F1BC26553DC19CFC6EF456DA872DEAA95884C5
D4D8E503E6BFCF252AA8E144F2A24F21A08CBD05C4F65C9A9636B102ED4ED535
2A3C0A4FF4A039C3ED2C9E00C3E680C4A8FCFFBD90E871E5075FEB7661340E96
44DDBD719F2D4DD690457568802749D1E6A1EB15F64A85414B1680BCE311E8AC
1C08758B6453DD440D8A9816EDEA14E09224144E91276B842280E04A0BBA4E68
CEC5A9603A7F56551C2B11DADF1F4810C734BDEAE930B5DE4556DA67981B820B
CD2BC5A0FB8D8790D2666E0AE5558B1D2200534E83F7851F3D9482A2E8908F92
3BA87358A66968605B3D53DA4AB1D93389BB689B0822526D9F240952001DD054
09B9BE40559FA3FA4F216F022D50C408ACB34021AAE5F2B257DEF13A25F02701
234CA72E44287FA9D88D7EF4F768C35A65CDA6B411323A501BF3848AFE448DAC
2240C6CDB5208EB259D89A8F1BE43B39F911F55D88B5822E443C898E7ABC7EF5
B3953C2EC6DDAF174DCED0BF9353A2713774A8DF9A9091AA553D30361C9EA580
56F4993B29EDF2D3F3F1D6DBDB31728A84CB10019CE7407FE4201FC9A9D70F9E
8FF56B5CE83D2810A507AE941431A5D9B513A6F55FDD452D6309492C76D9C5C6
DD9D8F6CCD27BD71AFFF7FCE5D34DC355A066BCC3C9282EC971521260CF0E12E
936517B05ED0108AC13A671654A2EFD5FB71109B16B3B4274BCE4EBD624F288D
9E90D28D18D27FE4628444E76D3EEA619AE9476D181B4AC774AA62BC6D8AE5F0
84F90982D5EE1D24AFB37703671B2493AFFA4C51245086BE865627AE7D0E7759
179D509827104F840BD2C720F35D46D9C8338C0F8C03ECAC14E9BF044A04A96E
177D1C5CE74D34AFF22F3937F05A1B54F46CE9C5F2D60907DB971F5B2F8E5B9D
3ABA4ABA144209E6845B85A64F3A97CDC9B6AA5BD9E68F726F511255CDD9394C
0A0332C27139192F0C5D79668CA0CC0CBBB14E4CDD707F11F048CD6E0756D90A
F2EFCD882A296CF97148364A31FE8D7B5250C8BBC7E9F39EFC55B4662EC31535
416F2F90DDAC955FBB297FD4829BB73079FA91012386544B98E65BABA975C754
36B64848E3903D03C59BE0DB94E12E600E82A72EDCDEB4AB2260EE95F46568EB
D0A7002D21C9BAE538CF8A347A2751868343EE4FB3730984335FB2B5B88DFEE9
66A8062C26E4B834F568CA6164D6FE9AEB126502B943DD390A50B93D1CDABCD3
C96FACE03115D56C6BE19F06CF7DDC375238E238B448D27D64FA49ADCC0A5B24
AEF014B5D48F6CC493AD69E74DF47FEA376C6EF4B14C2FB71ED0F42E09F1651C
EAEE97341F26A6591B83FE723C448AA04AE504D6C34BCAECD27DE4B247678C7E
C51DBF53850EE7E615C7A01BC705F714B7B0C80B7AB79C42C24C036C6718E5A3
6E1475F07D9F7035866A73B4D0A67807A03FB61352F73A349AFFE3CCF566F457
6A62FA32004F3FE6A15E7B25C6E9AB2D1DBC9964E6903AEB408F09A0427933F3
4E92753419A9FE79513A2E39FAA295A92292D521E3A95FBBB77AD659D4E03D2B
39EE02738A10059514A8B51A35D3302C25891B90F74EBDB362E1017C676F0A0A
9CB67C9794A27FC7F0ACD189AE59C8A75A5E9BED84A5FB6EE5DC1F74A620E559
51D8C5CDDC4B37CAE2AF70C48B6C306BE826EBE8D22DF714D1F2FCA10369A266
F5DA86D65F730262B0035E5FF68817C93CE0FBBC201B593D955E40C99E235D45
7F70F497A8A11748AAA70FEA09AD8F5BD1A01E06D56BB6059DBEF8AC8AC5FB0C
59B5CA3C447022EA6AE6F928DA7C9A6A1F322C5D53CE905829C41408CF7449C2
69FF41A9B83869D7F230C78871C22933C991EAE40EBC97D8DB082B20E4895E49
6D6EE9D22FD9B395CA79073C08C0053E3C26124538544D9C68717076746A8D72
7DC34AE353D29983338A2D1998A0D62BFC296E433A8E48CA90B999B298609587
1164C2A65BC00D0F124A8EACCCCDA7A7F65D5AA4DBF70A273B6CB918B00F6ECC
0131BA9461BFC53357E09E0A3C615E79A26261D83F71B944DAAAE74A4B7484AB
D22B4BB40D4E9038E721EFB5F672796A3C961C298B29ED896A27E389D134C21E
7BED9DBB0FBB3AE2ED4A661992BCC8E4976F842785431AAD804360FBE8A134E4
3CA9D26F8571E18D0F27F70ECAF659A99FB7955E0F4D8690447CA37F42A05D15
E1D6559A1C95CA424A643DD58D0416A374091D94CD7A48859EEB4A461A6A436F
D07DD5A94E7D5B033D2AD99FDA4E7373A1D6CFD11DE94DF6537F25F5CFA1428F
9A126E21D819AE1A044510186FC8A9D51C20D922F3279A85E31C1F34B6B240C3
000775B140120C6E697D7BC14AE22F87EC6885C3CA40E718BAD7688C8A0B3E9F
49652FE7D0DE406B2EB70F039AA8B10C7601C4929B2971A9A3CF98F52F9FE122
CCD2D944BE6F68EF6F4F8EBEF51AEB1DFAC87C164F94B36511BF120D126D6824
01736A019ABF0BA4355854251D381828F2D5C8460F3B066EEA447009C01DB22E
33764CBBFDC5C74CB881098E7586725777144FC38DCBAB71413A26068EE3EC6E
53300BA5BEDBE53E5FD61E6D2E390C7E1D82454093264E8A2013AA0C91058031
B52A08D996CF2C82993DE9497AF91D4AF8C99E68577589F98564AB36FA448901
E671920A8DEC9535AFA9038AA1D528C4B31ECC27A505A5B83E4ACA119C6D3BF7
1AD9B21318030B2F1F69F132E3DBC5264A4AD516AD4736CED6E8CA4C3352C78B
2B836CA994A67BD63576593FAE07433051723DE3A67FEAEDA3CF10F66F7DB936
D96BD0A813A5C40B144EE897A5CC701B0297E190B6999EE9808A54F86AE2C05B
0FC4056944066CDBADCE78A0524D6F190B155120749CA84957FEBF447B748BC6
27B3AEE460D4D5FCF042B7CCF4A4DC92110AC09B16669CBFA4CDA713606FC086
97E8EF90EF2BFC8BF6C811FBEA5163C68B95C0B65EA87B9D12942EA0DE78FCCE
9DD86341497DF3F0CD388BB386658FB6D774A46E9857E0091F3B2C6E016BC24D
037FADA56418D223E672609C891E32E96BAEB77C7C568F26FE03B720F5F2D875
9F1C5BF185C4B1DB2E6BBA48F4BD5F6457D92B701E7DCDF0ABE154A9CDE3BC17
8F1F1CF521081036019C20E3A8AA6958D08C3EA3275CCE2F96F0FDACCB50ACB9
37204C55EC41CEDA3AF577FB778E606C7C2EE814E8D3E1C250DE4D3E587AFDFF
A1266218FC1D9A386D00BE86EB2433531F5A978031775862254994315B01C937
CCAF1C5DD69F96F5D64DD288087639B02BDD29F9B96C5B4F525DDABE245371DD
4717AC198F6477E1A2E6CA5CC2AC20FC94314212F5146721FF639C6CEB6936DA
A7ABE5348153D0DBEC6F96F61B6B7E53DD82107EB85F5D2FD094D82F4F446CEE
B64340FCE74AD83B2082952ECA69C53ED64B6F03FE3F54695FEEB8EE1D61C6DF
87F7214F97C165F4962E5B78500E7F4E684AD4F4F575F06FB275D449BAB97B06
BBC205D8FFE660C682A8CED9E1F7907214AB2E6BC7C830885EA32605B069ACE8
66EBFA95DA16774EDDCA73685D1B145770BABEBCFB3989284B27B7E698E12064
147A2EF3F2883F85C9C0E927DAFFBC9450E1B6E918726DD37B5CDA55E6D0D8A5
C3B5ED376F4772DF45D45C4CF18BEB4811CF1B9B3D920BA4A98A80F8DABC91BA
362EA6A74FA33DDF518B09564FED9F04D4312CD988EBA55DFD3145438A223943
488699B3D16846B51F2BB650790EB63BB9ABB2B3EE27C62B1B01FBA662B70542
DBB61743DC569337082176ECBAD417354A5F900EA0BB5479162ED7ECCCD71AE8
3B3EE296F3D14D289B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%/PSTricksDotFont exch definefont
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 438 2022-01-31 17:45:26Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2018/12/16 $
% Version         : 0.65 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 216 2021-09-10 12:28:13Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def

/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% $Id: pst-text.pro 891 2018-12-29 19:42:20Z herbert $
%
% PostScript header file pst-text.pro
% Version 1.02, 2018-12-28 (hv)
% For distribution, see pstricks.tex.
%
/tx@TextPathDict 45 dict def
tx@TextPathDict begin
%
% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def
%
/movetoproc { continue { @movetoproc } { pop pop } ifelse } def
%
/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def
%
/linetoproc { continue { @linetoproc } { pop pop } ifelse } def
%
/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def
%
/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def
%
% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def
%
/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def
%
/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
%
%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
/warp {
    1 index
    1.4 mul
    cos 2 add
    mul
} def
/warpmove{
    2 index {
        newpath
    } if
    warp moveto
    pop false
} def
/warpline { warp lineto } def
/warpcurve {
    6 2 roll warp
    6 2 roll warp
    6 2 roll warp
    curveto
} def
/warpit {
    true
    { warpmove } { warpline } { warpcurve } { closepath } pathforall
    pop
} def
%
/circle {
    exch neg
    % .5 mul
    90 add
    dup cos 2 index mul
    3 1 roll
    sin mul
} bind def

/circmove{
    2 index { newpath } if
    circle moveto
    pop false
} bind def

/circline { circle lineto } bind def

/circcurve {
    6 2 roll circle
    6 2 roll circle
    6 2 roll circle
    curveto
} bind def

/circit { true { circmove } { circline } { circcurve } { closepath } pathforall pop } bind def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: cm-super-t1.enc 0 0
% This file is generated from `T1uni.map' and `glyphlist.txt', `gl-other.txt'
%
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
% LIGKERN f f =: ff ; f i =: fi ; f l =: fl ; ff i =: ffi ; ff l =: ffl ;
%
% LIGKERN space {} * ; * {} space ; zero {} * ; * {} zero ;
% LIGKERN one {} * ; * {} one ; two {} * ; * {} two ;
% LIGKERN three {} * ; * {} three ; four {} * ; * {} four ;
% LIGKERN five {} * ; * {} five ; six {} * ; * {} six ;
% LIGKERN seven {} * ; * {} seven ; eight {} * ; * {} eight ;
% LIGKERN nine {} * ; * {} nine ;
%
/T1Encoding [
% 0x00
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
% 0x10
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/afii61664
/perthousandzero % PERTHOUSAND ZERO
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
% 0x20
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
% 0x30
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
% 0x40
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
% 0x50
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
% 0x60
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
% 0x70
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt % HANGING HYPHEN
% 0x80
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
% 0x90
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcommaaccent
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
% 0xA0
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
% 0xB0
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcommaaccent
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
% 0xC0
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
% 0xD0
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/SS % Germandbls
% 0xE0
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
% 0xF0
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls % or /germandbls.alt
] def

%%EndProcSet
%%BeginProcSet: texnansi.enc 0 0
% @psencodingfile{
%   author = "Y&Y, Inc.",
%   version = "1.1",
%   date = "1 December 1996",
%   filename = "texnansi.enc",
%   email = "help@YandY.com",
%   address = "45 Walden Street // Concord, MA 01742, USA",
%   codetable = "ISO/ASCII",
%   checksum = "xx",
%   docstring = "Encoding for fonts in Adobe Type 1 format for use with TeX."
% }
%
% The idea is to have all 228 characters normally included in Type 1 text
% fonts (plus a few more) available for typesetting.  This is effectively
% the character set in Adobe Standard Encoding, ISO Latin 1, plus a few more.
%
% Character code assignments were made as follows:
%
% (1) The character layout largely matches `ASCII' in the 32 -- 126 range,
% except for `circumflex' in 94 and `tilde' in 126, to match `TeX text'
% (`asciicircumflex' and `asciitilde' appear in 158 and 142 instead).
%
% (2) The character layout matches `Windows ANSI' in almost all places,
% except for `quoteright' in 39 and `quoteleft' in 96 to match ASCII
% (`quotesingle' and `grave' appear in 129 and 18 instead).
%
% (3) The character layout matches `TeX typewriter' used by CM text fonts
% in most places (except for discordant positions such as hungarumlaut
% (instead of braceright), dotaccent (instead of underscore) etc.
%
% (4) Remaining characters are assigned arbitrarily to the `control character'
% range (0 -- 31), avoiding 0, 9, 10 and 13 in case we meet dumb software
% - similarly one should really avoid 127 and 128 if possible.
% In addition, the 8 open slots in Windows ANSI between 128 and 159 are used.
%
% (5) Y&Y Lucida Bright includes some extra ligatures and such; ff, ffi, ffl,
% and `dotlessj,' these are included 11 -- 15, and 17.
%
% (6) Hyphen appears both at 45 and 173 for compatibility with both ASCII
% and Windows ANSI.
%
% (7) It doesn't really matter where ligatures appear (both real, such as ffi,
% and pseudo such as ---) since these should not be accessed directly, only
% via ligature information in the TFM file.
%
% SAMPLE USAGE (in `psfonts.map' file for DVIPS):
% 
% lbr LucidaBright "TeXnANSIEncoding ReEncodeFont" <texnansi.enc <lbr.pfb
%
% This tells DVIPS that the font called `lbr' in TeX has PostScript 
% FontName `LucidaBright.'  It also asks DVIPS to expand the file `lbr.pfb'
% into PFA form, to include the attached `texnansi.enc' encoding vector,
% and to then actually reencode the font based on that encoding vector.
%
% Revised 1996 June 1 by adding second position for `fl' to avoid Acrobat bug.
% Revised 1996 June 1 by adding second position for `fraction' for same reason.
% Revised 1997 Oct 1 by adding cwm  (used in boundary char TFM code)
% Revised 1998 Mar 1 by adding Unicode for Euro character
%
/TeXnANSIEncoding [
/.notdef % 0
/Euro % /Uni20AC 1
/.notdef % 2
/.notdef % 3
/fraction %	4
/dotaccent %	5
/hungarumlaut %	6
/ogonek	%	7
/fl	%	8
/.notdef % /fraction %	9	not used (see 4), backward compatability only
/cwm	%	10	not used, except boundary char internally maybe
/ff    %	11
/fi    %	12
/.notdef % /fl    %	13	not used (see 8), backward compatability only
/ffi   %	14
/ffl   %	15
/dotlessi %	16
/dotlessj %	17
/grave %	18
/acute %	19
/caron %	20
/breve %	21
/macron %	22
/ring  %	23
/cedilla %	24
/germandbls %	25
/ae    %	26
/oe    %	27
/oslash %	28
/AE    %	29
/OE    %	30
/Oslash %	31
/space %	32	% /suppress in TeX text
/exclam %	33
/quotedbl %	34	% /quotedblright in TeX text
/numbersign %	35
/dollar %	36
/percent %	37
/ampersand %	38
/quoteright %	39	% /quotesingle in ANSI
/parenleft %	40
/parenright %	41
/asterisk %	42
/plus  %	43
/comma %	44
/hyphen %	45
/period %	46
/slash %	47
/zero  %	48
/one   %	49
/two   %	50
/three %	51
/four  %	52
/five  %	53
/six   %	54
/seven %	55
/eight %	56
/nine  %	57
/colon %	58
/semicolon %	59
/less  %	60	% /exclamdown in Tex text
/equal %	61
/greater %	62	% /questiondown in TeX text
/question %	63
/at %	64
/A %	65
/B %	66
/C %	67
/D %	68
/E %	69
/F %	70
/G %	71
/H %	72
/I %	73
/J %	74
/K %	75
/L %	76
/M %	77
/N %	78
/O %	79
/P %	80
/Q %	81
/R %	82
/S %	83
/T %	84
/U %	85
/V %	86
/W %	87
/X %	88
/Y %	89
/Z %	90
/bracketleft %	91
/backslash %	92	% /quotedblleft in TeX text
/bracketright %	93
/circumflex %	94	% /asciicircum in ASCII
/underscore %	95	% /dotaccent in TeX text
/quoteleft %	96	% /grave accent in ANSI
/a %	97
/b %	98
/c %	99
/d %	100
/e %	101
/f %	102
/g %	103
/h %	104
/i %	105
/j %	106
/k %	107
/l %	108
/m %	109
/n %	110
/o %	111
/p %	112
/q %	113
/r %	114
/s %	115
/t %	116
/u %	117
/v %	118
/w %	119
/x %	120
/y %	121
/z %	122
/braceleft %	123	% /endash in TeX text
/bar   %	124	% /emdash in TeX test
/braceright %	125	% /hungarumlaut in TeX text
/tilde %	126	% /asciitilde in ASCII
/dieresis %	127	not used (see 168), use higher up instead
/Lslash	%	128	this position is unfortunate, but now too late to fix
/quotesingle %	129
/quotesinglbase %	130
/florin %	131
/quotedblbase %	132
/ellipsis %	133
/dagger %	134
/daggerdbl %	135
/circumflex %	136
/perthousand %	137
/Scaron %	138
/guilsinglleft %	139
/OE    %	140
/Zcaron %	141
/asciicircum %	142
/minus %	143
/lslash %	144
/quoteleft %	145
/quoteright %	146
/quotedblleft %	147
/quotedblright %	148
/bullet %	149
/endash %	150
/emdash %	151
/tilde %	152
/trademark %	153
/scaron %	154
/guilsinglright %	155
/oe    %	156
/zcaron %	157
/asciitilde %	158
/Ydieresis %	159
/nbspace %	160	% /space (no break space)
/exclamdown %	161
/cent  %	162
/sterling %	163
/currency %	164
/yen   %	165
/brokenbar %	166
/section %	167
/dieresis %	168
/copyright %	169
/ordfeminine %	170
/guillemotleft %	171
/logicalnot %	172
/sfthyphen %	173 % /hyphen (hanging hyphen)
/registered %	174
/macron %	175
/degree %	176
/plusminus %	177
/twosuperior %	178
/threesuperior %	179
/acute %	180
/mu    %	181
/paragraph %	182
/periodcentered %	183
/cedilla %	184
/onesuperior %	185
/ordmasculine %	186
/guillemotright %	187
/onequarter %	188
/onehalf %	189
/threequarters %	190
/questiondown %	191
/Agrave %	192
/Aacute %	193
/Acircumflex %	194
/Atilde %	195
/Adieresis %	196
/Aring %	197
/AE    %	198
/Ccedilla %	199
/Egrave %	200
/Eacute %	201
/Ecircumflex %	202
/Edieresis %	203
/Igrave %	204
/Iacute %	205
/Icircumflex %	206
/Idieresis %	207
/Eth   %	208
/Ntilde %	209
/Ograve %	210
/Oacute %	211
/Ocircumflex %	212
/Otilde %	213
/Odieresis %	214
/multiply %	215	% OE in T1
/Oslash %	216
/Ugrave %	217
/Uacute %	218
/Ucircumflex %	219
/Udieresis %	220
/Yacute %	221
/Thorn %	222
/germandbls %	223
/agrave %	224
/aacute %	225
/acircumflex %	226
/atilde %	227
/adieresis %	228
/aring %	229
/ae    %	230
/ccedilla %	231
/egrave %	232
/eacute %	233
/ecircumflex %	234
/edieresis %	235
/igrave %	236
/iacute %	237
/icircumflex %	238
/idieresis %	239
/eth   %	240
/ntilde %	241
/ograve %	242
/oacute %	243
/ocircumflex %	244
/otilde %	245
/odieresis %	246
/divide %	247	% oe in T1
/oslash %	248
/ugrave %	249
/uacute %	250
/ucircumflex %	251
/udieresis %	252
/yacute %	253
/thorn %	254
/ydieresis %	255	% germandbls in T1
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setblendmode where {pop} {/.setblendmode{pop}def} ifelse /.setfillconstantalpha
where {pop /.setopacityalpha {.setfillconstantalpha} def} {/.setopacityalpha
where {pop} {/.setopacityalpha {pop} def} ifelse} ifelse /.pgfsetfillopacityalpha{/pgffoa
exch def /.setfillconstantalpha where {pop pgffoa .setfillconstantalpha}
{/pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath
fill grestore newpath}bind def /pgfeofill{gsave pgffoa .setopacityalpha
eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}
ifelse} bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def /.setstrokeconstantalpha
where {pop pgfsoa .setstrokeconstantalpha} {/pgfstr{gsave pgfsoa .setopacityalpha
stroke grestore newpath}bind def} ifelse}bind def /pgffoa 1 def /pgfsoa
1 def /.pushpdf14devicefilter where {pop [userdict /bop-hook known
{userdict /bop-hook get aload pop} if {0 .pushpdf14devicefilter} aload
pop] cvx userdict exch /bop-hook exch put [userdict /eop-hook known
{userdict /eop-hook get aload pop} if {.poppdf14devicefilter} aload
pop] cvx userdict exch /eop-hook exch put} if systemdict /pdfmark known
not {userdict /pdfmark systemdict /cleartomark get put} if end

  /pgfwritesamplecmyk { 4 index 0 5 index pgfcheckcolorrange 255 mul
round cvi put 4 index 1 4 index pgfcheckcolorrange 255 mul round cvi
put 4 index 2 3 index pgfcheckcolorrange 255 mul round cvi put 4 index
3 2 index pgfcheckcolorrange 255 mul round cvi put pop pop pop pop
} bind def /pgfwritesamplergb { 3 index 0 4 index pgfcheckcolorrange
255 mul round cvi put 3 index 1 3 index pgfcheckcolorrange 255 mul
round cvi put 3 index 2 2 index pgfcheckcolorrange 255 mul round cvi
put pop pop pop } bind def /pgfwritesamplegray { pgfcheckcolorrange
16777215 mul round cvi 1 index 0 2 index -16 bitshift put 1 index 1
2 index 65535 and -8 bitshift put 1 index 2 2 index 255 and put pop
} bind def /pgfcheckcolorrange { dup 0.0 lt {pop 0.0} if dup 1.0 gt
{pop 1.0} if } bind def /pgfchanneldepthcmyk 8 def /pgfchanneldepthrgb
8 def /pgfchanneldepthgray 24 def /pgfcolorsamplecmyk 4 string def
/pgfcolorsamplergb 3 string def /pgfcolorsamplegray 3 string def /pgfrangecmyk
[0 1 0 1 0 1 0 1] def /pgfrangergb [0 1 0 1 0 1] def /pgfrangegray
[0 1] def

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: Utopia-Italic
%!PS-AdobeFont-1.0: Utopia-Italic 001.001
%%CreationDate: Wed Oct 2 18:58:18 1991
%%VMusage: 34122 41014
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Italic) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle -13 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Italic def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-166 -250 1205 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DA8165ADF55799A329EB45
40E811F9140E5296B391A61903BC09B76E7BCF96FA1EA22ACBA9ED962E9BC596
BB22E4A514A5C551107BC74BACBFE55ABADEB1741C20BD80A186E49DD89CE033
CA0ACA0D0D4188B8A6FB40C265A88804443A7E912005A6BFD10EBB43315F7A9E
E8C24321131DDDAE6572BE67DE42C5969688AC1D7EB97887D783F63658AABEB1
FA4C2F625E6B6205D3EEC1C5E2FE8C29BD88FDF52802F3F5BACE6AA2007FC0FA
B6CE66673C1D698F51457AB1343CCCEC0D2FD0383BE98493902021E1A27B71A9
0BD0DC94B4C46825738C15B5E101C68813E1F8C8B19311648DF09363FCEF679C
E691E13CE96DDD1455A75181706F41EA2E0A6A4C870F7D3726547BAD35E0EE54
7F91EFEB803E93D1A9BA74A332EE4E56CDB48AC36A47B9B555997C7A58C3A16C
8D71BE01432D88B842B5D9ACAD19FFF7EC88B4E66036D2735311AA323BDD69D6
8CF32F9AA7781A2146E04D71C54044218DE26A4EFEAF67EFD04E4ADE1D7FE2DB
61A465957450E623CA58FC49FA2236C0BA3E81E9A9FA8909261A4A092AC9640C
08CB2AF3BC1E92E578086556ABF6A1F739582230AF46D4C184714197545BE932
1FE1F05FA46478BEB38010C2FAE84145D367FA53B10F42B7B7BA76B427210475
71E67A52D8EADC847639F0BE7F280F35EDBE34C7FFD9907E796F373015965E1C
FF36F43C653EA3F23B76FC2ECEF9EC19D5BC245369A690C280DAF9F3D8401A08
95D0FC1C3F0C033AE23062A80A3B8A944F642986A878A0284CEFB15CEDEA1347
552173AD9E7D40310EBE8F03A38B1DE9FFD95A9C086DEB70DE901FA87475E51F
6A1AA41A333EB31C7A4A92497DA3F599980B0019F6440CFCED34EAEF000D2BA9
7AAB27E2A559AB6E3E6164106B994B135CF847596223F2FF5B53CEE894A7B673
A48271FCAF28C2A83512FC056B1743721072F4A19BBBA8929394C572E85F87F5
DD8E5FB8A43CBCBEBAF47B56EB9431033CCEB5F4FEA9D490254D0FD696F930AD
DBB994E1887E1DB52B9433D8898669CFFBE7E1F690EA169F7FE42DA381FAE7F3
091A86383CCFFF7AA0BBC9A98DD6181DD539CB0AD9724F398FE8CA56445DFAF3
833F3FE34DF9CFA1E3D4941763DBD096BED0614DDF3A3AB3757D2C8D7692B262
C6E2CBE95660CF4EE1692C12AFF153CD3691F54DF701B405A8733C6F3AB7550D
5216AA5001747306F09B0EF64BB3DA65C73BE7A22843B9D84998B1CEC9628C95
961A01AD3CA64FABFEF615279C2547F15E963BD57A5FDDECDA8A08DFEB68B61B
04E6A7B4E369B0DD04478EA9D77343EA55CD3511A51C51CC0670594EB5C35402
09520914622B0385A7BAF7A1F35DF5093B7CDA7F251092627CA0CDDC9566FEF2
2D8F3EE4C5CA71733A64D2D13D7776028DC6239A87C6568B8E12707D8880A00C
51EDF60CA2A79E0D6830197722AB6445A7206ED266C2A3685EC6D14FB5F39F63
343ADEA9EAFFEE039CDB820883C43FF78A1629926169F4AECFB0BC29C36A260F
3BB07B927D8083B608409F1BF3BDDC1DA61DED58BD69FF8AD99256CC50530256
24026E355FE62090D1ACDBC7EA37FF2B19138C469C10AE179F63473BA8412539
0D93B0C11EBAE00C8D90D1E8539853CFDC1F849F6CDB07E4ACEA366623D4C806
A80092F7698762B0B05015C2E04D6FDC748991BE92E4F05CA38A1EDC25BAA1D9
E95DDA3540E1232B7450224E1F951DFC194F09B1E7436EEEDB908D61DC742606
4F32E8C8FA66E8D4367454CA97DEC6FE4167AF5376B7A8C0D54311DA1028846B
0C5D66E40AE25C8DC8272036BC9F8CECD243BB1A71A951CC34EED174C654F949
F816ACE245596D4CF66E204268BC4F9D78E4319414B3EECA756C4D24CE13EC86
71211A7C400856EEC5F45F05106CB4E5D21C81292D7EC8E34F70920E108B69A9
E79012C9F7AD7CF20CB97A9F361A53EA7FF2F4AD6CB5ACB2F5A7048BE25A772B
DE563864BF9F8A71BC8533A0EDEEB43200DB0EC9E14ED5DE0B5DCDCEA285804E
74440EFC9EAB685B8F026B2ADDAD6C0D954CE341E97F9ECCF6D8C4A54F1C482D
270DD6C57D331F97ABA2FBC724621864A66C2C44276B7D313B850AA481ED60A3
C22CEA9136053E54D81663E3BEC0954E2101093E0F11DDF102498A94359A5B47
79DFFAD78169DC857F9BC26D85191FA0A3F6290324C59F30B38678BC7F77BDF0
5E8A62D663AED0E397DFD15A08B8BE47F16C0F110D822365912A74FDB2B29ECD
5E540440EA91F995B0F9D0CF251EC252F26F852E290117C783D9EFE1119A774B
9835DF08003075C522598853720D3168DA214B65771B7995A97253C8CA51964E
439888484F17D6B410F8E5412628E7F6DA27EC8A046F07207C68D152BE44621F
E81A43078B16F6D521685AC47D24E2B2A0B0C9B0D6A251BF2C2DA8F7EEA4DEC0
EFD2FE738984E13F3ABA4A187A776D27F95AA36FA5DED55D4DCE6EB448ED4500
E667FD00E04F4F881AB92B702C9C6E4410F8B4B2A737E1E6A5A3E95E79B62590
7917A1FA558FEFF07A543EABD04128B01D2E9B790591DA00229226A340B205B0
3A9A7C771E4D48386C497048E5D520F396A5A9077FB461DDB53FB0C0768C636A
0B57ABDE5E61CBE2F070C16B004FBBAF0254E8C194DB436590FA1387594F6A79
BFE8CCAC3C218758F11DAAB9E5775FCE5AEB0C7CF35D5871E3ADDAE7385F4044
BAAC095EF9356CEDD00B4248ABB4F664CD29CBEC7F8B9F4747E6F6883071E283
CD19600668E48BE0F5079650DC8F94BFC31FBCFBAA637D2CE33D4EEBC2EC4ABD
9B796CC171B934DD045459E883149A2D4DC7AC66134A75E606A17CA9FBAD6485
54A228835EF2AC5D894680157BA8330214E1EA738390CEFBFA90823BB0018441
3AEE72C25CF8CC76003C390E7E8247757063E7E48645E18ADC6E679F57A19EB6
2D9C349B65C2A570EC684F46CF73B7D545F7521C1E1B1A71CC3A75F54721CB0B
DB31476C069BDFB9F96ABC40B5D1670531EE8528ECBF573DFDBD61A0B2E551A4
B142D8DBD30DC1F0B714B0E819D643B66B21F1AE9196885CEF86B6449DC74AAE
3A3CF4BF0C17BD930186655F75FDCB20F6D3DA9536E8E3F40D4C920D15E1709D
C3E9F77BCA0805884943DF21F3F3D4DC3CCBDDEDE399A7C5EA46585FD44C7FFB
E7664BCF70081674ED4251849511A769127CD2D07A1F1DEB1CA29CB15B310214
9A196ECE13CB4F395609A94DBAE607542004B3DC62E6A7B8DE3F5E89CEAF1BEA
EAA1A3E35D35F96F029B65090F5CDEF100B27F404048C3490D186545E78304FA
B487AA4B7E49B3D5CAE21004B18CEE2275D806FF8CF8D4704E59BCFF0397634D
CC562C38E22A5EDF409A3EEB65A549EA5111FC0DDFB2AC7452981DB0C6D6509C
8F0F1AD234E297E2183F4BC420EC76B4126B1DEFF1BB9BAF94774DDFBDB78321
DF2E16C80CC9C0E7A6E9F0D06720F24F2AD33DDA0D8DBE53EC4D0D857287C219
B4C2F3CBFFE1426522545243D50635FD40212CDDC05431C251E5BA0754F9E379
40CDFD2C8EBB44B6BDCB33920DEB08547F2942F0B098675BC1099BD4ED00ACEC
64B78668BF2740F39A0D3432B7F4F928F7CD3C6A81118A717F52C70B1CECF892
59023F01E035E5EB2E4EE33BA0D1A249A711F827C3F2663C4A876EBCC64A3172
20EBA435976226AC237EAB911A770786EB7A99E559356E086C7C62A81FAFC839
AE38C661DDA50A5B9F68503AE869D5E59659A117ECE2329A6CFC87E1FCA5C895
938748DF8D7366DBE6B6F7FAB3A216EE5DFB6E5D1416FFD2195322A257C2DEB9
689E1205E71A63A457C1770EED7A440D5819580C478B6E18763B8CE18FAB6C78
168592DFF145DDF8591C3B493604037C111998CE862E5654DC1B8A71C1F3511F
224338583E1D05994362289B55093F0FE57D16CD12150FAB6E54C9A00797A14A
31E8185581039491DB446924FE644DA9ECBF9FB37E55A69960F3184E28421EFB
C284DB98588482CB85E8F98F756A74F487A92ECE964995273E193C85EFBA3476
0D90CB34424570C583273BB54A16ACA137BE09F41CA7734E9083DBE7DA9B89EA
A128BC1F16839E5829473AF1774D308793FC1B34C959CBFB2869B751827C0858
6514E961E9A6DA0D5292827CF6452876636BC1D51AB0633C8A312FF632A0ECC2
707BEB48FB7097E0AFD0FF7A7D0C1ED063F935FBCB962C4EA67DDCB492D5FAD9
7EE98FEED2F17A278819CACC1FFBA246DB351BD5F12B5E5217684A3248A089F0
402B564A951879F199743D267D9AB0480ED8C0C887F047AB474242C5311F0480
79A425CED34F30EBEF83F727F043108CEE6A85F1F3B256034366DB1F52BBEBC8
70F8177AA0E168E4C3ADC87793D5F78FF21C017A5DCDCA77FCEC185DB8F85CF1
901A7B506626EEDF2D8A778073CB9402F28F85A4D507130E8F9ACD0E603FD1A9
BABBD141FDFD515D26FD61104D18E85A613BC1ABC8DA096479D08E56C64308F9
111899BD868CA2C3FBDB4330250E6B30AF0CFCA30790A98F2ED8C4CD6EF325DC
AD988F6105A09DABDA2CAFE45BC2E88852235919452B54800493962C8CEE0CA1
C4BB8E9BBB3D833C0135343BED9FC1817C8967F06DC088C788BA059C16BEC49C
70D2FDC634EC1C90B6CCE0AE7D127D165BE6CB13188C2A2CC910D8390E9A7811
DD901286FFCECC01B36F9010E5AF8059C9E47302C69058C90E667E746FCA597B
F800C3693B6E80FD5D8DE8B605DF1CE23F779899951AF8BC3F242CD7D81C5657
4A8A052D4BE8EAEF42DD35D0C5971BFB57E7DFCA59E5ADDACCF1CEEE6350F708
B6DAB870A8B4F7FB949DD094DD1E59DA20A8EFE68EA89B6EFE382FEF053DFECF
6814C3A90F4945393DC52A26A13E7B12C83D31ECD101FF297B398A16D88FDBB2
3983BFB269A2B740588222139C6C4B24E6F40DD38EC167CC64BE116BC3DFC67B
2A37D4B3683E12405463C55D2ACD8E255556FF3CF3EECF3EDBA6861580B457CC
16C7281A774CB61844FE80F879C3B5E9D299E5E09C2C1C374A29839430F199BF
37185BDEC00A65792BC41DB57490207B01A07539B45BDA63F16679F19F2E8169
86C13411F08B5F5A17F30D3F43D356D35D1462285C2D1ACBFC2D1CEF2289BD54
95A5A98EA8901DFFA2D71D08B98C5233D2B5EEF3E297ACBE318A74D1AE349294
38757021B319D0FE0069F7A34493D4EF2A2EB34A84403CB0F128274D55A897B2
8DFC782B3D4549D4AD1B581C9DC97722C444E1BD70C1E35DA4ED48609CC5499E
73AA61555EE91D331A6DF16E8541BDB2FEC57D3FA9B845CE8E6E9A840DE28BDF
CF6687F35015D9526D541047358896DFCA6A8D6933DDEDA4AA669B241491E511
FF240B19F6FB5EBD8F24699F209FED3DAF359861CD47A000608F79A3C2B91C78
AB2768BD57C32C65E6F1E84FC08DEC39E7D0C8B621DCDDD8E1D4C9074FF69774
C4C604583C0F92B9224C232F35822815814B81C3B4F47D4088C88BA4381C9283
1E051F5E044DFF009718877DA7599DD2BF15C0A15C04C46AF405923458A4D042
BB742B4C3A7C703D76BE97512DC9AEF23EB24FF8129A8EEC39324BC14C95C486
15F088ABC31E1026C0166B4F587AD6F515BA246760962A9B6376FB11DDD09721
8C48E4CFCD3ED8A1A2F2ABAFF6FBB002EC214E6B52B9F56878AA0BC6B2582CF4
F96D5A815184A99446E31C693B80A543D8B18EA198A5BBB90DFAF53666FA9654
79B29754C4AFB0862BE4C7BC22DC03EE19A90441E2BC41D6F1D1CAEDF7D87C6F
4D034163570D77282F434BAA4B7FB2E15F1D65074ED296FC5DA0114BF92E9A4D
87A4FF26D3263B0E4BA3F917E5B42660B4CEB9383ED09A15FA653AF27D8FB39E
F1F9A981C7706EA87CA1248E5B44D5A4E5B27B62F405923458A4D042BB742B4C
3A7C703D76BE97507C231F80DBB525C8D12B6346BEF03D4E3242D9A4840F66D5
2D77C3F269C4301C5AD3AEBED875914A2C2E5E6A9BB3375A9AF4B67C33CBE144
204B3BAAD1969CDE87A21860BE740FF81ECD6153EAE1DE8EF99678F58697FCF8
4BC0AF17078CC55DE42A06700D1AB8E5B67086DAD3C44CDD421CDC878BB4BABD
13F4515A482AE0F2B4D9708A2EDC09857D3E5F55B314E26422AFE931E5A70883
AD0E4C0FC0338BDA6031E445F889CB29994813B0DF591A174BD260A653A4ED35
A539DC0F7F65FDF6DDA9181D053025A68118EA271EB7B2024ED0F57D5472E86A
F465CE47C9BDB4190B5BAFEED9538802C11A91D31B272CD1DF9F8358CAD7246F
F8802B1CE0DECFE2B868ABD1799F8579A004A3F3F22644949C0301D58714C7F4
10792A25D4AE1547CF3FCB3A729AEB7574423BB1259944B1272B126B008CB0A1
F8220EFCBA183265EAA856AF05D418453AC29836F93EDFE1E399851BD88DAC38
0B1B2006B2B99749E610D025C02305D67A381B31FB631B71F69D51B7B8D79EB4
907E96F618EF8BB7541EB2C9DD4ECE2F9A2CB2B6AC222656713917805B28FB91
34609830AEB39EA37525A4669FF77123E6B1CB1AC1CE9A04CEC0699BB12C33F2
E82A3805F0ECD4C66F7973DB61382BE76889E53BC8B19D3B31DF582B40F9D298
7CF94619ABC955B8194B50E094E958F59B1232BF9D0CF9C5A5C68E3509FF9C7C
FBE201819397534CA528E5D88ECFB4F73F14B331CF0860DF7A58643D1783A46F
E5C074C0EF082D34EF60EC4CC2FFF847F64F31505AAEC92595CF6457CF0B1757
129F62DDA42FF30C70EAA562A60763A9D322E1FA7151DC45DE3F3E96DD4AE86F
0210A6E81B848B32FD737928A5031ADE3E9BA4667065A72C51E4FA23D569F13E
99DAF6BEA9D3F3B3D28B3D00DB5240475702E5CD64D93B437901DFDDA522FC2A
10A9C2B6D2FEC69D5FB75F60D215EBB80EB68DBC5DB0B0844D53C5BC7C4A30E2
56DC646668641E4C15422D8DAE5A86550D40DE956486B6A7CA5BB62E5E51E55E
A7EBB5E65B3D39A09D3431E656CC8848D17A70BABF33A5F0F20D186DD15BE0E1
EBE6D859911B0A08046B6B11F3538E81BBBF1F34CA9D886F48159CF4EF86A27F
05D2FCB11F3BB60556EBD593595D7C58123CE02C8538C79938E28AB7FDE63E2A
3CF7674CD3E28DD97C48146B5F31ECC116BAC5D3C49F642329EF41F77007325A
0B3CF634D9ED7B01A32D1DA61174D35E1220CB75EF11E395BE0CF71C5F5F9A58
34307C674D94509DE842D5A029709A1A84570634DDC7FD42DBC5FD7EFAB41BD2
33860C54E69EEEFFE39F1D2CC4A2247218DE0DD03BC020CB0BEDCDAB6C6C3DDD
BCC23EF80D9D5B697FC8F45134F85F3BAC7E95CF3DF858B6CDA2D0192CDFA110
7C4725F6638AA4C31879C24C649478840A418074615F70EA772EA62E867C0CFA
78A1197FCF22F5C2431DEECAF3CE272B57054140F1FC1BA2ED1809A5FBD84954
BCFC767EC61ADA55129DA851411F7D1A57FFEAEF857A854699A4E53583712BD4
433E492B6DD39C20CE46C8DC3CDF109AC8A08C0368F9F90D9C77BD85D66D6163
6EFAC4989BAA805D75982F177C188F76F0F22997661BD6039517F33B7B4146F2
BAB25AA73F91C02B6F18F7FCEFB1E4B2A7BBB5BFB2277B07967FDB90C16C7F28
CA9D12F4E2CA734817539AE7766A5F279331AFEC25EA36BA7A628735C8C3C0F0
3DD8D0E4008A7DC06D58ECEA321B468E02CF8A5D6BB3E221890903458CBAE7F2
360146598B1389910EA623CA30A07C4C11B815B8A4A1DFE6859E9DDC5020CC3C
14D8114D06702D22F0B7D04E284E2E82CFE36CAEF0430E9D0B26577B7C6BD0C1
2D653DE98E3FC72E8A2CE33797676042C994F416CA53A97CE3C207EDEAA72C2F
4F091E2AE2CAD6D926B5F5FF384018C92555B5FA228A91A912C5C0D87704B79E
0DA342BBD6460F3933653B2701FDB0FFFA36B6591FED5C305FA277618A1FBDA9
16B95A3F4164CD24F7254D31AE37BC3A58D7BB969DF4719F2DB45C6DB49679E5
D1471A4F11954E669DD3DB2155DAE8F2B07C4E926E082184D255DAAB15D261A3
47C0CBC91E50C25BB69B09222E8D3BBFE5B6075422B20B5E3964A217D51A2AE2
B8CF098B6FF0BDF677B432A407FC3C3BAA1311DEEE3C4C03A37A680D1FB28953
4F6EAD97464D0AEB57973C9FD3B35074D85BE81E848CC7B7B07BBEBB19654466
8A5A3ECEEBF447A2039F729778724297BAFE7746840ED1EAA29FAA9DEB15ECD7
5987614DF8B2629E9DEE7EAC7EDB89529A11FD16499C1DDA8D664187DE68BD1D
973D08D99E12871A27BCB2A25ACD6B747BFBA23FDDBBDE53F1A751DDA39E0E69
0271FAED9873A45B9AD5D12922BC61A1969114E73DDD383C61BB2B883DCA9FE0
A023A3DFFDD38D8A182D99BA04299B60BE4227D9E8EBE567A6013F75A67FFC93
68060A6DD9E8067A3F227718802B41526C7811B7A838BB04E8A3017D2C31F192
BC69828681967A2EA7DC46BDB7DE017D51A63865644E0FC66901476738B002FC
43C6889AA3076380885F9C357433A871E3F0B4BC36D59A4FB27833CD25DF166B
4F587AD6F515BA2467633ECB0F1864D21ACBFC2D1CEF2289BD5495A5A98EAB26
B1DCC873ED32EBFEAD38B6016DAD065A6869DD7A1AAA24680FD124FD6359EBFA
90EBDB971264162BCA4B03CD571FB6C199BB4808531DE9E6A328BF57F4FD4DE2
FB81187FA290DEC4F7AEDF1C42DE0C535B22950EACEAABB8BB1644A0351C8167
55B52758EE44D5EA06048549A2D2A80237C38B326E0A9FBACC6D518A77223200
818331EE0C7A55182881305530A6D5C0E60A23F44D3064C504E6696FE4CF5165
EE48948E397F8CECCD82598F185D3076CA53A9D73D6D392053084F17E836A483
DAAA15BFF4BC8B67AEFDBC5A90D503E2F3C64351CCA6CE75C47B5496C03BF3EF
243AB2A1A92DB11620461998F8DD06828CFB799104B00C6A7067B92D8737C63F
F48DA626EA3E5467179CB130E9F217EB329CB2C8A4718117133799E5AF1980BE
7AC4B2E752DD4077C3756403F21DA93935F905A77AE8C432CA2EB85976D548CB
671B664619F2F082B9F231061251AD3A5F00E1EF1CA0E3E91032C3718543066F
7E02555B8014D2E8922847C70BB43A2002F77297F12D7026336BA4ABA0DAFC86
A4BB89EDFAE2D6973812E5070287F27E7ADDFDD97CB2D4AA133851EC024AFFEC
504705A4169D0288E62623C654F39EB341DBC4B350822CAA20CD35BCFC450172
6EC682E85BA7F50B9797408218B30D5A4B777BEC468AE5C73036F34209414E32
9D0F07E8C18D37889CA802B852FCD1E618A247C30339F27428FB4A650385FB08
00183386581A1D83E687DDA166579DC68B2DB949582F92F13324C18346967ED5
178B231A992064C7C112E525B73978A14E1EB98EEBEA238B9A200FCF68823358
75E90BB3F842BD3D39098380B2866CE2942E463C0206918EE56D7A295DA0B178
92F6548AB5D41C50270BB75F181736F734CB3B071944ADF19C4790091888AFCB
930B8C17833876B152EF470F0047518099B90902EFE6792F12DD84489A998C76
DDC82A1E395397E001C9958EE2C233A0C777A8F6EA63624940B1CB8CBD6E817B
BFB25150344486533A008AAC2C6C4630F0D6B87BFF46E7D377F6B7BB47F25B2D
4B734DF033CD0AEE3C4CCE6E2507843E37CFC2757FB8E45E41DEE80330277D10
338528553E7F0FD78496A17CCEAAC2E924378845EFFE0C808A6B7AD79EA4D69F
9AAC27AA2593B8D115267A641C66507725A6978639E20422FC0A9CBECBF77993
80D4EFFD55C4173B43591601F954421D27476EB0282E256A98811180A47AB1F4
8EBD3EC1992CE930EE2921E636E9F38058786F1EB7A05B4A21FB3EBFE72A4BA0
884F0E073867587A69E808EA9700BC8DA24B5DBAB59869877BDE34A9DC5B16F2
C5D2EAE51E4D7B7D66860A3154A16BD4C20C400496AA833DEFDB921C86FBDC57
3D00544F9FD5CD4B75CEF451555C48F9FD9BD152ED7195DEE9EA590DD6977A84
EE90A5C6425A4804D63516D012A2C4E382E3718BE52981642CB1F6C34FCA3A0E
A4A03A7E0BD493FCFB9426D764B530D2B46DEA322184103598037D562B63A5B4
3D50BE01FC9CD5E72DF3175DD6763E27145EBEEB9A9CBE2AB98CD0306F07A118
8ACC0A24A34A6423D9F224F7445058638252A29089B2B2D160C5BF9505E4C99B
CE9EC16F83E2553610CE3DB684E719778E0E1C89C05CF973571B396B8BBA281A
5E97026BD3B5ABBED63110487D1736C716B94633967DB7B82ECCDB1D69A2BD3C
82464013010CFBE9CE1081043B279F8DB8BE9810EE1E5B900B35A50316B165EF
6AA66DA7BE6664435CA3166DD934CB45D1FDC4660B8F8032F7CEEFDAB1EDFC11
7F0C107672386B599E5C0F4CE186BE79F20B00C3CCA9095D7CE02F78984D3971
F40572037CF0708F7624B05158E60E5842FBF2500AC5558307248FA7C2849780
F55789DC957CF96424F659AECFDA17EB044A5600BBDF6E36152EE1AEC918730F
00EDA24768D743A7F95D7578540BB8EC379DFB3452DCC03755831733048EC010
FD9CA379ED9F75BC75ABD92E41AFDFB64662708D435059219C9888F78E8A9CF8
22761CE4C41B8C5E82A5108EC71A070534CC7DE08B38EA9CD2E1A74748B51084
9B33CF52FDE6224EFC605447FE812ACF7226D957033A8BE277AB3C058BABD906
F43BABC58240337773C2D8D2DCC2E695273DA242DEBCADAA0D9A11FB75656539
A696E4239743D2A5EF9AFF11DDCCE5B7E9621A9BBEF22B77C993FC325A315450
A110BEFC471EA8E070EBAB0954DAF0249BA1E52790C3F4CC930C3817853FD142
E108C5CA91FCBEBE26EC61470B2F8D79B7291932742C3F48EC238872A7F622ED
970B82EBFEFBEE3A5EF0AA367E563A4B765C76507EC78E4FD5481C6A9AE79EE1
93D80D0DADFD31676CA50349E5888775F153E7568666A12B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: Utopia-Regular
%!PS-AdobeFont-1.0: Utopia-Regular 001.001
%%CreationDate: Wed Oct 2 19:10:38 1991
%%VMusage: 32987 39879
% License clarified 17 November 2006; pfb update 19 November 2006.
11 dict begin
/FontInfo 10 dict dup begin
/version (001.001) readonly def
/Notice (Copyright (c) 1989, 1991 Adobe Systems Incorporated. All Rights Reserved. Utopia is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries. Used under license. The Utopia fonts are freely available; see http://tug.org/fonts/utopia.) readonly def
/FullName (Utopia Regular) readonly def
/FamilyName (Utopia) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /Utopia-Regular def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox{-158 -250 1158 890}readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC06347FF71900AC8FEAE3B716D52
C1AC4E5DCF4EFC3B9121F09CAB0C4BE35FD0740E08C853EF201BBFF011DE2163
790FADCD67A15500D3F87E2616B7DEEBFB3934B09CF7B8BE9B945D2638887F73
1C3214D790EBA3065BF944D77DD51978CB663398285895D774586FDDD6A7467E
B1BAC83EC766EDE0FF34D07C6E315D7B79B205EDE798A08FD0D9CD4A1307FDE8
7F57AE7A32759AAE66C77C6127F65D92BCCE74ED784372E34CC835BC789BDEA2
9E27574D388B2CEB1DB127C190624246F4991BA418137BEC72C8CF7830DCEA26
E13BC7F0CDDAE283F10C1FDCD1B46ED2C4BF3526E9DD2FD5DD021D1116D3D9B4
44188211B1332E1BE656BCD0DC7C6D7F23ED03F9A42FD10B79980768710365EB
A8E211AC8936893AA9318E20D297C730A6A626FECA9E5F91E1E0B5992698A7F3
F8BEB86C9BD1B318CB141ACCA92730554DB8F57A8A21370C885A2F6612188DF1
0200D203FB6B33556F21DADE387C352EB80799C9BFA76FC4192381FF39AD0FDD
883D39690055E6A12477D408452D16B726E759BFE286CF62450D5683C4EB0845
EE3B21D7D64E100CCE7A2B86926828DDDDCFAFBF3861F98324538A0799F67E49
72B96013BF16E190839B9D1DF92A8B6A610468110B7CBF1C24CD2CB1E994CCC2
4BA3DF5753B81CBCB3B71C63FFB17B3B47E949C570D03A4B162E12ACB36EA11A
22733406532DB9FF39B2B2DE58B270277E7B1C3E1A460CF4B6FF063F5CF37F5E
AC709027E0FCEC1B27227D8A49D0664C6FB0178976D6EB5B09B4F47B5E94D782
25FC9D56FD8EFD97D514EB2ECC5630ADD87D6ABA98B19DC1AB262AB9A8C979C0
59A76953EC55333F7800EE9330B7FCCD8C3BC325658816EA542654337DA7D3C0
407058CC4601BA7B6C6B2DA0E376F7D94DED19271029E32844351B475FA30E37
2D98E7D5E6340A878CEA0811FFF598E5E1617F2D13066E7640416BBA886DDF0A
E9B8A56119CE61E57FA8A6309245DF8BC6CCA7CEA55FDE2D7B6CD06E8C118928
1EE6CB47A4B7D7E38CEBED3A0D1F2639BFF76FAFACC17476D13F4CB31FBEBF15
89252E409F16ED56EC1DEAB4F330B7659E93AD217785061D581BC8FAA0851487
2DC7743E246A65958A0024F32404FA919C6E38FB98D4F19E222E6295836B9F23
42D6F145BE576A8AE7707F44CEFE942452A684F7B87155BEF1B4BB3A82EA8409
E9F94146C168C7110D84C07B30F077ACD33723C6DBDD597646B72220E6B350AB
B47A6D3D3ED3FE12A187496C99BA5414AD5598F52B4241E9DAE3B12C932D3251
51AFCED1D207DB6D10A4ED2328BA1B1FC19F34427AC97A386E34B2F612402AB6
548A0EF59C67227F5F783714FDEFE76342942AA46E6CD682FD5B6DED50AB8AE4
312258B880F982E1A068E9C62C48E1367FA2088549A2D2A80237C38B326E0A9F
BACC6D518A74987B468C6E9532CE002FE7F15C88841BE3D3C6E1BF8C7F287F03
5FD1D6CDAC9B9A2F8BA7A2B491D05C023DFD8692B4B15C12C70309E73C0EF588
E023513C305D4DB5F5D608B586C124473C9E8A4E329313BB8964AC7F49A6C5C0
F20571F772638D3F81F4BE6A859D9110FA3BA2E3A395027558686879FCBEBF04
73729228F9176E156509A567C164A08CD3A5B182957E4BED0AF6B276713EF5B4
ED92729AD82051A69AEE4EE82B1BEF02282E4D6DF1B748FDFEAC1DE7FA93E9C6
CF7D711DAC380E7D662BDADADD4ECF9A000D4BD5B0C33B59248319B23A25F04A
53E8CF846AB70FF55CC872411A05FDB24365FA4665F9DD1E5AE25E8F9BFBFF32
B14979F491A6B478C103A642616CF8D5014BB15ECF4EB64A18BC43B9F20E47A8
3A8390CC2290E86F1816956AAB24BE7C20FCF9196E8E2F30816FE2354A974D8E
8A2831FEF4DDCC45EFAB7045685920CC61AC833A1B04D8EC4776875AA5D7B73D
40B57F255639CC452E8FB75F8388A56AAF6BD76A35BAF02203CC7859464A10F0
398750A9309BFB680B4AABC2E214E95094C9D6E389489E4AFADBBD20ACCB6253
343570D9118C78BE00FD086542D39318DBD7418E89ED02307CDC8FE19861D707
D2E89C5017731B6A27B9555D5C878EF9557E6EB0F280270E7B8429080771437D
3BD128C8E986FC1490292991F46A097BCDB7721AA914F963B3CE0F3D5BB280C6
6A8B196F6F0F430178801BF8AB7AE4E2ED878923AB3FD85D358047B6E015C1EB
27D09B9E31F1196667C2DA9C6EBA1ABE4D07DFAA55C4DEF21E9CFB0A35BA1E62
D96B4C6965D204A467879E3E68C80A69FDE9C9234FB4B4B89F1347772BDCD031
2C77DE68F95E0FCB48DF26D105255F7A8F53E8EA351E6BF22ED619F4CDFC3B06
F432CB4843B0AC76C507FABCCA0E82D6372415FBC432C6EB476DCC4A4A149012
F2959D7838E3B9ABD3C5FD869AAA4D1BA8AD21721B333B7B63000EA44BA245AB
1F25F208EE9B8F1637B939AED75992BD51853ED2933D0B6BF07FAB710FA70DF3
3CB1A86C631A1761EDF19A17BDC58EC84E85A71DDDA0114CCBF24E21C732198C
F43A111EAC50FC9EF0A3A0CE67A11F62A2A411E0F281418F1C0AB9984A9DB221
65597ABEB543D367E07D1044743CC783CF7A6253CB59231F7F18C4ED4765B28C
C6F029FEBAF38331A32E880D1E6827673F40EF7064E15513CB7305B7D84AC5BF
9B9ED553ECD42D2A2C47D7A722F99FA1DFAE3123979CA8E58F89F5A379C93B18
4974074556685A76F277D627FEB311
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-OT1-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-OT1-10 2.0
%%CreationDate: Thu, 29 Aug 2013 17:19:55
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.0) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular OT1 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-OT1-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-15 -491 943 760} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEDED3C4C
F20DB259A3000F3489C16795AC54627FD04DEF7B30607FE829CC65E0C091EABA
105ADC46FCAD05FB99DEA794E929284D0FDF5CDBB96ACFFA61B9B5D9C77E6D38
3C13B0839201AE82B0DD541B005DF26EF7BC668D56135E74BF0112984F675470
1F9823D97FB93C5CF26B3ED6A97320E184DC912A1F3FF6ED230A1C46C594B7E0
517FF1551558A9889B31AA9676A5441DA04423B6150E561E48DFDD26AE62CD02
01475854B3C3D00DD3CDB46BC3D8C0113BA365D093E040CF3CDD8466A0CDF068
EB38D4DB6E9E8D80
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MathDesign-UT-Regular-Extension-10
%!PS-AdobeFont-1.0: MathDesign-UT-Regular-Extension-10 2.21
%%CreationDate: Thu, 29 Aug 2013 17:19:58
9 dict begin
/FontInfo 10 dict dup begin
/Version (2.21) readonly def
/Notice ((c) 2004 Paul Pichaureau, under the gpl licence.) readonly def
/FullName (MathDesign UT Regular 10) readonly def
/FamilyName (MathDesign-UT) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/IsFixedPitch false def
/UnderlinePosition -98 def
/UnderlineThickness 54 def
end readonly def
/FontName /MathDesign-UT-Regular-Extension-10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 90 /integraldisplay put
readonly def
/PaintType 0 def
/StrokeWidth 1 def
/FontType 1 def
/FontMatrix [0.001000 0.000000 0.000000 0.001000 0.000000 0.000000] readonly def
/FontBBox {-39 -3331 3250 928} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458BEF7EB4BF9CA685821DAAAEB8ADF
892F4EB5CC669C655007A1C4B5E91678CDCF7A89B25FB0FB53FF6D3A61CB7231
A1EFBC7D17D40265074C7528E4523FC36BDBE32CF0CCDB6D3AAB064540916BBB
F6400E79B0D769C1CFC9F219BDE40F7AFE53D3C15AD879B51CD0D19A11160BFE
160278724512B082FF8FD28F8D9D5D0739CFB0CFB691F56358EDE43F651287EA
2411E5C5693CCAAD08519246A1F7394606CCEA24B236F7389B7C6728456626B0
577EA8B39FD691E8D8FF16C9FD07FDC7921FF346ACBA0F5C9EA424CB0B2EA314
16A005EE683B428A2D2D1A6A15ED5466BC80AD8D0570AFA303CE914C678386B6
07865906F4276B92EA7C98932F14851F8155040BB2B7C70C0C9321B6A62285E0
7D38CF8A938C5FC6B89352CD3593A4FEB66954072B94C019B9ED49EE4EC7E0AE
AE48940A702310FEE3D1E8894371757AA34E684E040A913FE712593371E4A2C6
496F6CA0CBD0C205E3FD95965B32AA6D1F4233469A1434098A2A2BCC9B08312D
EF48D09D0260A1E02978DCC651A74B2D99038B2AC16FD3729746E24084BA437B
AAC63A7A2DBCC89CFD7FD0115E7809711E92AD1A95B3174E67523AAA40603643
568AC4661FC0BF21A3A37D08F7756FEE7A74F4A3C645629EFFA4BEFEF608C541
EE55684EBCA163A0123D7B83CA9468D4BAD04CC423FD17A6180B8A42893E7AE6
F0D98F99EE8C5B8A4C7C39689B51C337D4309EC4C161751901B8E305A51174A3
52B4287124520AE198A10E1E8A1F9B671148DFAFCA347C9D511F10B7F4BE8706
B2E1D860CAD9F2BDAA644CB25A2AE17E65989C554B680E31469B6B9E53CD2AC5
B6236AE9C148AC2EDEB838D01627CBCA08DEE001A969A2171302D9D4469ED144
17F4FC02725AC6A3C0D023318435EF68C1E3D27777E8BA3B00F0A77D32FEC3BE
F0851050538E45282B2A3D6CA86FD032B4540EF00CF5D8AF000FACB7642CB47B
759CF35BABB120CA770A4BD773638E5CB91B1AC3ED44705B71660F8302A34E49
9F546E807ECC4DAD864C8B48160EF78BCB60000904BEB0C1F3CFF594E0CB62B3
7B4EB0E0D344A118752F23BEBF39916EC4DE4C80C2F4E2359B4C709E592B5338
8D3B46FBF5AB16D7E2A3FC0168B7C9C2867719E8378E8B4F9AED1D20E820837F
C905F3E55706DAA729832456E229AF679D028C40BD82C9831CAF6CF715A7DAFE
6062658B0FBB524AEDC1FCB8473009599E8F29A5645DA0F2D711FB4D9FE97794
6FAAB7F7E180C167773A98E09E6A816DD798DE9E9F2DEA716EC2A5490D42439F
D75C1D03150A205ED5A9F1AE7ED883C062C2AF78CFC9EDD1195D91EE4100B95D
DBEFF4B5B4EC8323F4888EFD14DD9D06240C3A8202A45E454A8F91807CE5E62A
4B6761FE00CD45999E4168F9897533821E65CB242F012B21B236804BEDED3C4C
F20DB259A3000F3489C16795AC547B55AF5E77DC5F6CA09AAD1BBF4E3AF2AF4E
FBC1FD5174F5EC78D10DE39006AD9D9CEAF215709DA9C1D161A34E42F5B336EF
EF1BD1AD8AAC54BEB4E9E22B8227DEE058C90CD76431644C6B85BDE4DB71F551
65AA7E40A583D3CF941821D5B1F6E82A23FAC439614342BCE475BD05997E90AA
E6ABBE8AC3BEBEE07B94826E99634D97F9812F3ECF72B4E426F144345E9771A7
5F205DCF2F193F36545EDCF7E38BF93A153B8016C4E222D954DD5CAAB45DBE62
7DC9157C3A04CDAFDD75EBC992E728662747F01D654EE12C9B18AE0825290F2C
3E32BE3D82E94FAD7CC5D24D1F7B07B2EE4D4DD33CD99EF3BAB3B6BCD3B6DFD1
C5C5700C98F92104B8440D51660413F48A5B071C5D0597B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: SFTT1000
%!FontType1-1.0: SFTT1000 0.3
%%CreationDate: Wed Sep 12 2001
% Copyright (c) 2001 Vladimir Volovich <vvv@vsu.ru>.
% See the file COPYING (GNU General Public License) for license conditions.
% Converted from METAFONT EC/TC and LH fonts:
% ectt1000, tctt1000, latt1000, lbtt1000, lctt1000, rxtt1000.
11 dict begin
/FontInfo 6 dict dup begin
/version (0.3) def
/FullName (Computer Modern Typewriter) def
/FamilyName (Computer Modern) def
/ItalicAngle 0 def
/isFixedPitch true def
/Weight (Medium) def
end readonly def
/FontName /SFTT1000 def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/FontBBox{-208 -360 1374 838}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052BD0CE60552BD63101D7CDBEEF5B11
69C468645FE4ED1AF2541AA0770C1DCF81623DE0ECDF49F2B522618F650CE6CB
CC8C21885DD61AF8A523AA677EAEDDFA51A1F9B1885EEE0456196D634E04EF89
F17499DAD982502ACC349B9EEAAE4A71A73D1147318C60A8BAC10510DE90D8D3
F46E47295D27129A5AFE0C65E22BAD10D06885A2EE623FF8E1D90287A083E00C
EF25195F68A2A98170E4875AA1B1ED6A435B5950D131BC48179F5BE3191944DD
8626DE76AAFD8EC4DC8241F2ED33E10698DC7741D6E45CF5A02FC6D2068AA205
EF3C4FDCDE803F4D1D4FF03A079CD4FC4BAB3C558A8FDDF53D34AABB7D89E4E0
CF76F77ECE57575C27718A8074CE275DDE4AD245220A8236400BE47BC76DE13A
9EDA4BD5744C71DB407BCA39DBC9D857122A1DA969E6D0915FDC1622AB8BB88A
93D2EE72E9A2FA73193D6CDF254252980674DB644EEB36A2036E04DB649F816E
E70C4C43E88609C8E8B8B84A920CA933FA00F41F2FC3C867825E2AC658FA0F7F
331323E22BD193A0A8009B3F0EE6D55281CF1076F1631FE509E79941FF08D0B7
ACFEE566C76FBC09F3B4AA57959D4EFC34413ADB46292ED99CC8EC4436DE2CAB
86B8B48847353E826F5346762CD5D353727DBB502E08B934DAE4E99894706BCA
DC35AA52C8610137C7E336009D564831E1E7936600CC3891D3A58A539523329A
45DD54B8D76F43582CE621F74FE7F8FB06E32612FB06B66CBB3096C0DD63D097
08C206A620CCC9ECB49CDC17295CD0B3C9D2DFCAACE46137490589D72A6A57BD
FE97C0CCB9087CF31EAA7860444C0D2A1B230F1879B1CD80CED3863680AE37F7
39A117963BCA696B1EFA8EA500DF5B1C5F6F42EA16D46CC0687DC684B2AE28CA
8511448362E82092B10FE5EC94ED5667ECBC015A6817A57769EC9EEAD9DB20D2
171DB059E96BD97ACD9D5EF4AAD6612EB7D1A0ED6DE0C7A5BB6A1796DDD98278
F2222F94C2D9FABB1DAD4E9D5260EE9B7A881D2F26EB1EC11D1665CC06FB71F8
026DC8EE4278EC008A25E4F5C4D5D5090888E2A1732B36220758A2DE86A7E5A8
6B8B6249A125B0BEFC25A4A5795647E45B3BE2C9DA00E7EA72C25CF8C7E10810
995360EA2FAB43254E2F2B858DBC35ADD9A094154193D0526C198FC570C89C3E
209513E8D5268B987C05C0B9114B3F340503E3B35852776303A1FA1AE15E98B2
DFFD072B9A0B00EF0A7082AE4B7898B953E96400983B2A476965445B33C16B92
8D96469645E90DC393ECFD1F0D1FF1A494D7774DE8818BBBB81149773D0DF63D
5E2BDD7F55340CCAA2C29EECB5A9AF76FE1B7195F7A89A4DF974AB2D341C70A2
A97C9184CB81320DF07DEA87EFC6AAE69F735565B9A279C94711D7350422FAC8
2C374D5DA2920460CBB67DCFDB5A885DDDE88C9BAC3F458A51932D7AA774B281
2D6090FD4B1D4EDCC43816AD379AFFDB32CBB7DD7BBE902840B0E696B909C937
323EB4D4D854478CD058DDCA8F6F19DB4EDEF832CE2A982CDDFEEE1C519D6230
37D39EDBF54B68FFB571615C0EAA8BE59F75A9AF83248D170CDDA5C1CE6E9161
790F05A8FAEE3A845A1C9040D6F16668DAEAC582E46E13447122B95093F816F8
94ADD420E1B5749C3EB71C4EF774A5D79874B743292E0E0B6EDC2A19EB425740
49DCA5FF3091840199E01D25E908E4505E84517C80983C0D44BC29B509DE4C9A
4020E0C99E0D74BAB0E1025C33C1A6A17F95859DC19929F34995728F4B225616
FC555CD94593804226B0191860A062EA1FF4047A2705D72210735BCEA5735DF3
16A683E49F9334D7F1339D898038B50C0E552040F86001CA4EA354E74DBBE94C
AC3E80E5F5127AAFB961C0BF1CF18DF16ACA8D20DC033451BD6A6A518777CF2E
2BFA2AA697F27FC4CDD600A8B30CC8AD97D85580D34B6D844A30A5CD9A2B92B0
0BCC6B4C6F1E4B622AFFE3B187395EF316196C9D4FB2F587BE58063E5CE124B6
A09DF443DB066FEE28F67CFBEB2EE4AF7AAD78A37E8A29152315F5CE6E364D5D
18B9C5796A7BDA946D33464E7EFF3CFCE4A3440770BCEDF28AC65210C3652D58
9681C058059DC2EFC61EEFC10FD101B48FA7CFA74B5C88F53908837FA899E3FB
8440F2588CA7826435CFB937E6CA5478991E3259C878F260DF0DFBD65171980C
9059C488192AF1FCEA7C2E384AD62F4436EC6E9E515AF333A7E2C594F568B0C2
59DFEFFAF7CA831A87E00B4D60B2CE8882889AB4FF6866C81C444AC83D31838C
15C70405D9C2C0886337D8AAA2B6937BE5560D808C9D96D0D7D51FE92D52DE09
8194D4C2A9E505542ED950A6D66AE823D871F2E83D7D3E1F216F33D02958474A
A95A68C4F2B71336FE2CD78F24CC1B72CF4BE7BAA7B108793BA95659C2679B05
EBAB7F318DA3C65B7B737669EC0272C7BE8C807525631A459365B7FD44E96228
E2CB7B463B77FFB0D7A5AABDBA6E65A7C94A8FE239D01F59EF9D1F2A12D10CA0
6A9190F656724239EA5AE88B7C73FAF13FF8D90CC02040AD4102EC84DEDEECFC
D5E0AEB7E228F211E5786CF498EB271C57922952B5B7576890D0823E35D3600C
FE96CF3CE7F41DA9ADECFA259D1ECE055384331171DE95D29FBB84407FBEA91A
5C1849A85ADE38E1160368778A557ED09C2D3375EF314567EF7B00886ED9D52A
210969C8E350CA0CDA66B5FAEA03843BB4FDB905112EB251E08434CD1FB81B89
61F03E096889DC9024509183C63092B883926A3CB77DDBFE0100C486AD8B8E00
270682BAEB6C8A987D61514F6DF3B26B7144D84CD719A38F17FDD7BCCDD5EAC1
7A0786773F9120B365BC6033066A1F98CF444DAA16F66285778C3E2CD4BB631D
9C72C599B1D2CE99909C468AC98EE0E7270BA9A20E60B8E13F999A8DC745DF4D
00713E149B33B185AF2472E5C865FAADFA4BFA5AA1B6CB8CFFDCE0332FFC2A13
7FC9C9A850A7C60B8B4A6F4504FA9F8BCF9EB99084E8462D20F60E926E8A89D6
B76291894C0FE6433CD52E6731324FDA332655A716F859CA887CBD806310E1AA
F04B2FFFCA909E51811AB88EA5B505B5F326E0FB05FFC0DC492F4D7E318426FD
7CDDA75A3B768BEB3F2A33A63F5AA84626BFEE93BEB58046B83D590B463BCE00
9A580D00CA8E697ACEFF707C5CAF286F4322314DD5C21065327393CDA41BCECA
4E783D502D1FA1E0C5A1493F36FEC0709D6C33F0D17D9CADCC9D128B77574C00
6312B2570F43B154DB14220C315FEAF1B7B910D78CF9A22790A020865CCB496A
756436E98DA00E305CC7017EF7A7C42886C1EBBD183C0573B0CB9C97209ABFE7
D49F806F12DC7717560F9DAF72D09F8A5DEBB9CD4753C97BBA78C35D75E934DC
24A3D079F74410EF877C07E8A77B371B2E51404282845D720CD9A15C53B2A644
FA3DCFBAA6C5342A93321ECC688DC91D6A1A26CF64F60AED726D4253B1FAE43C
4BCAE40A8FF65CDAC34AC084B6AE0200252AE48BD87582EB6C88467D8244237B
CEB7CC260BF3D314DE03E8E6F42E7E490993A234B2DF61C2740A8EAE4450B763
5C939383F822C9842C5D0C6D95098E23536CEE02E71ED78C3F33FEB612111842
8CE6A1F159DBFF07ED4DEE51ADCA94A329EDE034A926A37B440D0A65A6C56CC5
D185F48FF161952FC9B7BBA1E0C9995F56030748279871E0171FF389EB30C3CB
CD6EA6948863F98AF49114133CC430BE71C9771CB880E51D42E4773BC9FCE759
46AD1EF858DC7CBDCB8F06BA14CB71FDB322ACD2143B36A5A0F80B0E1C5EF252
AD1B1D89E5835B0DD4B8AD25EB1EB36DA1A87A2B87A6A577651BF998F965C694
BC0C532891D2007CDC6DD09BAE86195EEF7264E6122A16D517E8C75200E44A40
AD5E73AFBE8CEE260B85C98BEFD29BC5C9085AAF00D000ACF7891ABB0F75E169
6B9FFFE0D1F7217AA400E50BBCA640F35896FBCE2E543520C013A368FCDB3450
4F017FDBB5322656862DDD7C3552C0B76FC6532659CF4EF37B0349DBFE5F743F
FDA8A8C167223A82E9239921FE58CC0B13B522B9F96977DFC55219895CC982DF
737EBFAA0D75CCF76C27A2D8AD61CB386C420D073AE8A72E5EB496665AEB27D6
DD3839DCF6BD5546C277FE4EE6E04C23EA07681C391F7CE0BB3FB9B0943A23EC
7F45612CC46E07875B27F853CB24E335E4F903E2BEC959F88C7FB945614482BE
E6C96DA9D0287E9C2421C1BF1EFA8C970B99310912F82C15F455167DED9D3777
0EFAF4DB59560F078DE4CF1E923CD41AA80955F86226CF381C72291EBB15610F
02C9986116DD0BFC419F724349DB4BCF0DFC91C23B8FE6B993CDE3133136F8BE
ECCEFCD41E7BA921D367B0F308A0BA859BE590A4D7A19F27444F05DC7CEC6D1B
B14993FEED7FAD9B7D6034EC2EB5E8B293C2B02EEFBEA5E17788F8D3C4CD4D1A
67BCB8C799089916303832B169786F2D749F10479516B3AC98E3C7F55081E4D5
F5DA3AFE742168EB971DA5FA37D5FA489977374C6F891A45A5C491B030C40E1C
727911FEBE1F165416FA9DF533BE64F594DD09F82CEEAFFFFDC70F4612AE90A5
3B0DBB1E882AE82292FF237556F04E0FFF033637639E26F1AC1603E753135452
46CECAF3EE1260CF3AF1721FDF376285B1BCC769425271A5E5B2F43DE4E302C4
4D08884689FFFBC3A0F74BA87F716315D0372E051156392E5295F207726537E5
84D7D9A2E145D1D0961BE703278B2023F9CC59C7D77E8CC2C54BFB8F5BC45BA8
1B0A8A00AD7FA9FA045C41D5986EB0A40B5CD95503478383863D4B218E597A37
B05787E100FD3C54002FDD1DE1AB5EDDC5A75360379AD865341C849E24353EBD
8A0B47FE17C0EFF2B0525CA523E6133B2B7CC7BC55ED73AA86828C9D45CBC37E
59B1DA90C247898549D3F36F6578808AE6489B9FF8C8C495C812E1BBB4E3B69D
DF28B55563D721660682F826C4E399F7B9BEB0B0192EA36BECCB4FAAEE690057
725918DBC5EAA17E79A2B3872A369DA7C5EA4653F83CCE1C184163D096D44981
1B8522B71513DE5D75116BBDA4B92CDD78FD3ABF42F521ACD3E8F45B56587CF8
25E7A60319C24281580105AC3D461EF59E7A6619D1CBEF62F82D0B50B7D79630
EB1BBB88603823EE8094625D5F7DF0EE61C185EB5D6C1CCBFEE4EAC0A5DE4ACC
F88DDBDDAE335E5073B23BEA0EBCF391BE9C945E7C3C9F9A46B04078D23572F8
3B2966D435FBEE582D0048908980BB7419C397B0B4FA4637B63C47C0AC7CE269
02FB565176F6C03190B02AB80069F7DBCCED8901F90F6CF2952F1238F1703528
1FF5EDEC9711F4EB08F9ED7D287D34A1CF9A6197941B12553F6462E95474D786
C8653BDE44F361E78967BB388E6BCFD1970E0DD4CB2B87834E45898C89330BC3
3E551987556417071CADB861D08C2F4DABBFB9BDCAA486B13F1E17BB4725B467
535AC80C18F244ABE9F2A95589EBF6B45D088CABA8D7F062204B651E83B1CECF
7227BB9109CEEFD2232849FAB1495E0C5EFA06069181AEB9DBC6F45C8A2EB583
47F31E3357071F763654680C500A09579E63EB6087560581E095228F59C50C5F
7E3119B289F072A9B114AEC1CA30A07C4C11B816639107AF64E711723807BB0C
9B27AD6231DB5A6CB507C48E6A998DC7088171FD000B792F983538F5B8BC1F74
F77C197D9B33CA1B374625051960DA427CBB19FE1F2563A7085931DBE1FC4705
838E516B1B4021598EA77954D98B78E17BD39CD5588CAAD1E91CC8A6715DF579
FCB3A2AA4E1B7B86948DEEE2ACD71ED5F66EC3B41746D69F860DA40767605D19
2C7474D68928C534D63F193DFDD31C5ED07EFFAF392B53BA0BCB0E709B7FA934
65343A7151BB70D36F0D1BB4C97D37BED40BF37B56363ADE66CE8EE2BFE7B05D
F417D39587518860C9B05156A54FD3546FAEE08568A98B1E0E8BEA41318D849C
05B0E24047CF42873A113116359FA58D44489E2A7F295A22390FCA60FC701F11
1B48BE85DDB773A45531FCA6A3415BFB34610D1A4FE64ADAF91D18D83AF7BC14
8498F04F23FCF151D0F503B4B1FBADBB424E8DEB9AFB5DBE3FB49851973828B8
BEF905E8FA521F1C17881008C268C635704A93491A61ADF484A1640C6CEDACF5
72324DAB9A7B6FA29987C4C2C750BE37AE380E3D2BE056D20AEC2CBA610716AF
FAD6553C6AEC02ACA484EB4BAE6582A123CE4EA6B9DA529EFAFE44BA7940D223
9A550A850DBF632156B715159828F2ABEF44057BB1513B35426515EF0693628C
05D6C447F86C8FD91B7D1DA3259676384C92D65E4480FBD0632FBC68F00AFFEE
9E086E6450E3FD123CAB6EAE2DC063095DBC491C8D74793648763AACFB3082AB
0165E0F936FD9673D0416BAD3A3ABA18DF3377AA039F2E86A65ACC7E68357FE3
59398F2D22223E9AEA8875145155CFE3CABB35BD346E2040F4D9ED7E3CCE3C55
2CCF8B83ECE8517C92C0A3D63AB7D27CC05C7690741C83302ED6B4736E2BAF09
2DF5E88D51C674C818C773AE158B3F90C1DEA8246B855939501C04F760F08D58
ED1885E0977B67C14827EE75E26F90FDF4AE8C7C58D60E9F2D6F8DD5A7F2B1DA
4620C8AA2E58E6E86824F23F695A1691CE8CE57ADE11B56D5462F2538DA561E8
6F95EDC4010AC0B6B1D7F33D5B4AB16301BDDC6863AA50AAB280D18F70784AFD
98523878C4F5C8E87765A9AD5648C12F4C9016F0536D8D5AAFCCB3016C566B04
255097450DB147850DC5BE7A268C6B0B4A5E0E8319C667D1FC30CFBBECACC0A8
28A47BB58CE1DECBA918C05E79FD1157F31A1B749B5B194646FAFABFD516F8AD
9BE81238310128E4CF44FB6CB84CF25321B119518F8915D26C7F5BDA42B2B422
8CFA829EB00947C8D9766E811353D344022AB91C8A9ACF420F2CB30D1B5BA2AE
C0F487E99A654615785BCA695E70AB0F47CD15D7207C7A825D08BDE7E506A2FE
66F68DAE9CE17319CC2ECC68C4355021430DDDB5EF76C8A9A44C9B04554AFE96
84ABB0991D20146347F5E03448350DD8CF4DF4BED62AE20551845A3706D05EB5
6DE5662883670E6E54378D78B9A9DE9BCC72F4E5D0BD1C80AC7D28BD9F35A475
A7A72FECCDDD6F4DFBCC8A504273FDD95DAD8DC0D480AB8DE8E7561404D5B4E2
46EA4ED93F0051B1E1E9631A82643ABD4A038022759EBDF9EB35D2FC00A0D947
02D2F9D1A136CCF816E7AD2773295B40002BFB9868ACB8C41077C9D30FC064CC
6CB30C552FF981DBB08EE42A76F11607C84F944D3FE5126940887D334D5F9E8F
791C86ABBA55A956919D8BA9F69A5E5657C8EF4E71C826E5FF81AAEE632F4D54
104FDDAAF375BE56AF47F976E659C31B4CA1D1428FA0E147553296D3BFD3E6C4
75674491455DA96CC30555FC7A40CECFB8CF71B77C58443770FC71B2AD037F75
9B86E08B5ED6823AF1C31B704A2596B53047B1059986EC5FF4A8073376B5C153
3AC8345E3D53DA4AB6E11E3ECA1B860FEF24B74B2502B9C5E232CB4CF649C350
3F08E2C7C8E1ADF63DFE9E3BE2B2ABD660D2B603B5A400109BA195BEB670F0DF
0644B2E6647268201063B1E386E6A2738D2A61D155583338E2829AA470A1CBCD
A289CFE59086E8E7043BF9C355A5C29EF4F8C47ED334C810C3E2AB48E6DC9400
3C96C3C084F337D1CE5A89C7298531871D6AA60DA42C5E456FCED1601BF5C457
2D69A22EAC5A3F9D962EB8CCDE6D1A394EB7B7831203194E76D3726E3F50F160
EED71843B9EA5A218FE065BBE91FAFB6680255D29719C192CC65DA0072523797
A0AD0CFE9A4DC6C58341B6BA6B08D1F074FFD2356EBF7641727AFF8DF1AFCF13
A96A51D398662F553BEDCE5B6BA16D5ECBA6603CC2C9BD3B16AB6F3C877462BB
802F05CD6EC3EB7E978B7113541C3B84D430DDD78479CAE6B97B372AAEB7D219
6F268A6650371F0D4BFD284560DD928B97F03B930396FEC2F9C91DA0DA7DCFA3
3037F0AC98670DDDCEE451D0E504C5A23AAAC107F629D885CD0D47132C98D9C8
C2E10FA573F2D6D8C7D8F1E782A3ACD5F34209414E329D0F063BE7F7D60B2E14
33CA696136B6AD2D692946ED079E83C8465632828C8C98FBFED958FBAF87FF44
869494B4028B4160979405292D01E9E43AC623E3D8C713E7BB5FDB28489D8877
423FAE4BC6537C670FDC930AC97D84290A953A235F101B670A6EE75D274D4782
DF9F213BD7DE8CD18C799992D38EBF207A83CC396807ACE71AD8C3ED8C840F1F
ABE7147F7EB2755A6B2434BCE500F78A24C631A1595871E3ADD1369E83B1F17E
F1407F512C2591DADEBAD154BEB335CB8D7296D7BC8CAC41419555F92E08EE7C
8370B7AF18CD4CCB756A12B6560312E9A207101BD32328BB512876A0065877E4
FC0E664FA67F0C661414952348DA7AF58914F54313F10A3C06E106FE0B35A70F
3D24993B7603C32C1AD88A0961264187B02C5300952D0388BB946C08C09C2056
86F211CBD4454AAB910BE8790D2C8B4E500D7D00A94B1DC4478067DE503BABFD
012A0B89374380B9DBDE997C279757CE1CF48A174E63E97A47825AA8182F5C60
61535199A8147612F8FE12D52CB2FC743407F97D94749F379E83EC049D3A6015
12F42E4C713D963466FE67F4977F31461F60C68DB63BA09D059967D0E2F84C30
5EB699EC1F34E11015506394FC1B1350787E9BF1B95463DDF61A3CAD2E0FC6E8
6772530CC9AE3BD558D7026DB6D1E2CF5F084CE1CCF0E48F38919CB1BEC39D54
9089FC76A570D409A330CEA0DAF7C5B204EEB9282568A612A9A69A4C787BFC61
3F3FA299289B23F945DAF89C84C9A546CA5F71F912D3A7BBDD9F8267F5676D66
D00D38D83D859C06AD9B0B41CF464BF1B464013AA1E0823C22230770531115AD
54BC3F12ECF5D2A21749E4BB36F459D0EF18D8272A518D73803867953417E042
B26C218BCB42366A781D86A0C17F6DEF39FD8692B4BA051693281A24F7E3FCC8
D249E9E128A3AD06A18B2C6BBB0762B588251C3BF6B996A3E0D9B01F141F4601
75AE7D7E6068500894304EEDA172A99BDB5181FDD3A7D8C74987A7F140E0A0A2
6F904BA7B8A76A224EC7756777361FF22160C45C20BAA634B6D413CBC814AF03
4D8886EA81E498A9A575C8821BB4350C40A5989329A62D13CC6DE31EB2FDEFF7
AA929919D80A469905269DF62F16B714E0802AEDFADED2E0A7F17BA1FE7A7C1A
8AF388049C1F1B0F2FBF63648B5DB747DBF64902C7C3E99B4844A73771CE0A5F
18CA44B23C1D26A3B34CFC486FEC7EF998C17E1BA181478BA5733CE212E3F29C
D7B63E41AFE5DA440F8F4DF29F28E50E264250ABD13866E9658C1D31AA56C883
B7F46D35AF2517C19292843AEEA334814A3D597F3697B03A944C47E0081BDA3D
2C64C054592F4514CF98E3E29C51B85E6DB6805B46187BC717DDE20B991E8535
1A62968FC46C9A686093B3C855CB993EFA4794FE98DDA3CBA9169F3277712394
804BD1145B54AC82DA853CF3FF053FB78EE140953AC867BD81AC5BD40ADB6AEB
372D9268917E109AA7DF85DC6D404D9BBB1090E9EE6B3F1878CE18338725F274
ADB0B8843277AA48C0C54F8CC23B96C529908BC0FF14DFAB0AB5ECF8894A5591
19CE1097DDBFD7445FFD1B2C69FC7A4E2121669C6E6C5B432D1385BCF612794B
9E7199889FD2AEDDA5AE9497CC6B7D11F4378713F548E73339C9C22D9B04EC60
552DCBEDEF4366F1E5E72A5E739FA857304FD5004A51F230ABC1DCD0BFC3305E
842E7BC0355B5D2B89D59C24055ECAA2F16576E0052A0EFE1097378428AF52D1
2A63682A0D210BA5EB1F628528B65F7002893F303D2569DFEDF2B572384FC1EC
7D7F105D525636EFB6323C09800637C908BFBE05009793473D814CBC5A3269E4
E11B9A33CFE9DA0A2BBB48A07BFFD97BFEFA0FBA57246D31709F58977A6EF660
824E290A945A948C0822DFFCD57DB107E0D5E728CA781E4A440A01D02E986189
012F5925C5DC14AF30093D5CB2BF0F32AA0175AA7A2C22B674DD538664EDFE62
E1FB080B863E859CF828F3A252484F093B58BCF8CD91D526E21F9FBF7203F38E
BD8995B586BC4EA54403637F1819C7F3D17CC180321635E8202B7688893F3C51
E877E5F31ACDBD05C06D1C6C4890B8B5F0B590749E87F00E6AF8B3F94876E24E
B575FFD1D1E0EA8096DF40EAF1D60DA29C1E8D74793648763AACFB3082AB0165
E1A2B785A12173D6DC7B28272282F119071C8F4AD719A38F17FDD7BCCDD5EAC1
7A078DD28144F7F6CE6249A6C34B3D0140393D2ADB3C4C399C4903ACB7D82A16
D2AB62148833A50AD23D6B4C503DEF856054E2297F5419CFDA9039FFCB4C25F0
16DE1959072241DB1E958AECFB9BA08D6A7388E3464A38D52F7767C7C6BBFCDE
2F5586557C55E72733FB59939215759069ACC78BA513A6C11F50979A11769558
42C06B035E156903B461EFEBEC206DCC84BAE29DC18FB2233A129E3C9C64C68A
FDCC3B7AF3BA4F8250E227FB0FCE42294EB2C1F61CB01D00DEB2CD24D084DA2C
600A5584E6D369590DD9B1E85677D4A906C021C1549497932D98AADD0F5E3BEF
E38464E22431C96F866B5AC13A86EF3DE8F77C05C35686AC42833D9D16ECD19D
0A6D58CB9E0E782986C2914C57EE9AF55A2EBA50BA064884E525CA3D66A9AC72
E524ACA3CFF5DC5BF93C3A23668320BAB75084B1CA5FD6ACFCD87501894BA625
C6A749C3666D105747C3C1EC2CAE0587DB3C71DC1C0D1563B662DBF2F1DF8FEE
FD2EC607217FAFB4716156FBBEC758043D245356A4A4375893F8C61DA43E6140
D8C39C78168BCFE359ED3CF202FD7D73610AA31BDE0EFFA823A8E8799BE5105A
EB4EED77D407CE511A8D1D703693B4E89EA543279072A7DBC384F1C0EE76C55B
B32230FE2A8E7110B41DAF2C3D4695B7721FCA3CDC3DC7FDEBDF9CD04762402A
77302D06D056DD4D243D4B23575DA9A6AC6D10568B505F8FD5A8C4F6D0D7FA8A
21926FB5EBE3D70401501849722036D41DB5A6863075DC6C0653C44BFB3D1E1B
9865CA97DF69594B76D390751B41B3ADA384E8EDE7E6D3D17A3B106E737FBEA7
0F6073CE5F31481D5DE9438D984A8EB9A97E7AB80C1E07A5AC335FB48EA262E1
28DDBD0985505CBBB2E55CEF4C7250A53039E2E933F65C28DE47413A34E7D58E
9333AB11E28C333FDBDE69AE4B0D5034C19E3965CC759617E70E07090F745F2E
1B2480E258CAD21F2BA386D613A849DAE119E0C4A26369448FAC91DE3BF48EDF
7BF10A78D86453C36AB88C656345253BE302F789EDAB182967543D7D8C453962
494FA418C33FD16A623156C97F8C17818B23C8A0DD3A6CD73BC476B236547F6D
1B71111DDE5DEDA97EE65C2DDECD3D90787B2519A58267334D91D2D27C565961
C2A01064534AD3432832B66CE1A4FE3F10AA44095C43A572AA50B35A061F290E
522C15C435466E29F966F1FBE7705D1CCBA78266F22517753993AE7AB4E30C40
48487185D7603EB3193A90CC49941B8181AA1745AED61BBEFDE8164C9058307F
EFCF792513C2AEC6CAEF6F31ACFC06D4C39EF5044524A9F4310523B30A1A729B
270EE3C4B2B3B84C5D1434ABAA1E08A3F241D8D12CE496182B15C515D0012864
D9AE93D84A19945E72250234A349F8617593AF2E03E83C630D01C326DEFAFB68
A66EE765DD539A309323EDACAF44DDB6BFDD5BFE2BF1966F45C3DE3397E5E830
4EB112D075AC6FBFD889D8F47774DE38978BD0EB1763B55B04ED6FA8ACC48FFF
B76EA2715C81513995DF7B508A91B883DF2E87D284A653C93E86242CD3902DFA
75BC447358A74D248BF012B5A18F9F993A39F7103C69E569E0AF983BDAAAA3D2
A8CFAFB7D2E779EBDF4035A37C5443A72141EA551B170076C33C505CA64CE821
03B2AF2E61D48E136027A20768AB0C9D91087BB3C6E242E9CAE396251BE474E1
CD0421AFDF8EF8BBEA1385FDA256AAEEDBF510376176AD76F2D6725CD0209B85
4A7E8DC216249FCF4E88F201B618C26E10F395C72CF231995D77233B767868F0
7B56EB943ADE6D7127EDAFC2B0349236B17E4FEB8BC04E55A6455ACAD83402ED
53CE1E7364346FCE943B87241B6FE678A3B2961B6585C3BC8751B9BE47440632
22A226D502AF7AB508F5A3FA7DC977146939FCBBA6E61D1FF0CBE776F34C2121
5E72CE434DC1797A7188AE2D8B68C5D30AEC5F7841430F38CEF6AFEC51FEDAAD
953978847D8FC94D052944B53F16E67D915592A9185DE54E4AD623924858E2D3
8A7D4BDE1BC2B6CDC5EDE3815067BB6238D6CC59FB6CDC525D424730065D914F
CF32D4364A9CCE556374EC6A041EA45A441C36A797687145C8E0B55779F62495
74CA3CADF103DAC3E37D108EA3E48884D5D9DAA8270B84D517897109BCAC66DC
B62E414E8637EFB43381D43713BEA7B108793BA95659C2679B05EBAB7D5FB795
ED91C70109DB3B7202952C4F82B2FA591EB0607BFA31BA20E1E9414264C06FBD
73AC0D6485766334EB95ECF4787CF3CEA9B7E7C13A2E344A27A716B0689882BA
EB7A39AE8589222A0584135F9F38141B8B4EA6FB47F3EB318A8277B3D259D7CB
6F5FABF55416385BA6A4CF3FD8B389526B0192B1340B4945A75B98504001EFFD
4053B2D539679ECDBEC4DE16A8FE84344CF76BE6CC5281EC659011B00E756848
65852B16E2BA5BBE800825982BDED79513B57E8A6666919C5B9385C50159F279
2FC8F45FDB5AE79051DBB224935D13DB39D5776176204AFF41F79A35E08C8FD1
4D52B22037060D77D0347C1974504C0C3E3F02BDB58C471BA96CC44370D14BB4
7DDB23E9DF931AD9134FFB899888A39334C72339C9E4567B59128D6CCA835F41
BD3B71CB6E61BE3B7ACEDE3C2E017076F3D7739C0CE880DD6EA0C32C4D318394
7B5A7B8670952BEB56128822AC4F22B2BF30F3D70FB77AB42C2E71871E9AAA88
11278DCACA654ACB66F2F66E3C35C703855411876EA967A0386536B0AB8DB635
1BF489C8BEC0FB2CB6ABB6752DC92ACAA2CB08BE11FCBC636207F5118ED71D4E
4DC06C800A6DFD8B4FA053C5F7888BD5816F4DF98E7EBF9DA8AC804D860DB6E5
1173704DE35D983BBD04E98009AC80EE6177D9E09E418B68C248C19BDC20454E
7C79565507AB1C2EF749A1DC23384BC7687031CDC8D9241802B72CC805CCC397
18B204B48310D8D9A6BD66554DA6331F0FC7D93C74F44A78999DBFF6A57D7C41
94D3FDB1BB53B8636630F31E90651A9EB56118C8785F8C3792689724B63242BC
4DC709DCC9B4B09A6995CB7015A1998338603A155CD6A023B6D057B10812E2B8
DFFE959EF86D5C5A1043CBF3E4C8BBE24828D1880C4E674BF56CF29D06E0FDEB
52BB38FE3F21BB22E6B2271613DF7982E9728794BCA269C58E8D34B6815649EF
A251BBF7C913CBA6053E07838BB78EFA8C0B8C9CF3C30094B80E850BF7447E41
1C842A3D61C78D21551D2530969281B85F09C03D370D6CB9253C12B6030607A5
BBDDACD1B3F78C5A27B24EF6298CFD19502FD24B99CD5B7F09C61E23B6EA61C8
CDD9758100ADD9CBBB97E584D42A882DD8ED7FC3FB69C8C12B5802AAE8821DEA
A0C697F35FA23C0ADA3AFE7425A545BA89E207F09C21FCDC052282AE1779ACBB
5AA57B369AA2D5077ED01A318468C9DFEF1E9D187AD9CA260CDAAEDD0DD902F0
196203FB06C48F46A055FE8ADDB131FA225973A6CDB4660D53291246268801A7
242CF6907738107F4DC9BC75FDA79BA985B301BC9DC61F3CDB8FE2FC7FE0E1D2
B9CAF797650B4538AC52DF1DD4A95CB3A796EDAB72DC588A6F8C14172D3760ED
7D2C074997A8B5BDFA0086C8AC00BE38C83FF456B5C435C49841F68358989E2F
9B20B3E47EEF53A49A6A788A7B529CF5CB576DAD8A569A91A1D23D1CB9A8B115
895F4DA2BDAA4EBD37C9EF51586D459054790D28EC9634E9A154886ACEB913F1
E0FC9EDD73CF405215F6A4D7CBAE7E57AC8EEB3811BE2BC948A926FBBFE10A50
1096018E95E6497BA3A8DDF6BE4AE3F74A5593DBA9FE1F9F7A5B4FCDBB28421A
A1776F14FFC2B48BC96BA985E2E16056E5BE88A192119F788B0DFBC001129408
4055EBBC3DA9A200BA7E005F8325C89AB1AA6C4EABD09BBB634E8FD30A6B82E5
855BB583AF2F463715757CA99983272EAB35BE21CCFED9F46EF16605F8E5A270
AFD52D5B64DC9FD708F683C0D78E65440B483E62226743F8C52B1FAC7AB634B0
E396C87D8D4C6F88651FDE7C87365AC770171CAC58B04CDE0F59D8DA17DA574A
2D612568A755A2475B1C8298D03CF2BC22C2C7D09E1D0D4D02C2F3FB155D3C9C
FF77499C01C3415AC785647E57362285E921A1379CB669CD68985E43E8BE4CEF
3C03343A62D14436EB36CCA899FC15991B2009B4DD28A460C862DD34E1A74DD9
77461116BA62EDFB6552C9CF58B498C5043D3FC6B2EC5F07219F9110AE5BCA26
4B088CB7A1A2B2B8BCAEE867F9CB65F0335D5D31A9DAAFDE3F0A7DB4B12F0902
6098188A30A42AC346E21968DAA0EFB2930FE498C8D0C5CCA7AA0C9C10066C50
97EC50C6A22E11F96B173332E6FC9FED9960F3EB9B8E15E0456B5B54D16ADCDE
439E2D50DCBBB177B0CB9C97209ABFE7D49F806F12DC73DB3C5D50A2D5AA8B52
52CEEF8AE58083EC629C9C73DFCF7FAB7CE21F0814C4FA99AEF6C78BCF5EE0C7
988AEFBB9AA05D395287922CF69685DB051FBFBD15A24463D3E0AFC7A2BBBD47
285E472D63EC5047983995415272004192ABFFD6A0D606A24984276F4C7686E6
D8D0B709F15E70470AA5B281ECA2A9D9626D78913193F669CB93716D9FFD96E6
F0DDB3AC8727971EFA26A6564CC6C854BDF53C19CA389592AA90C6EE5761B51B
355A05470C7ED55E9C7088A62618F22160C2FCE66B7599ADCD063566FF8300AA
6806CA03534916DB0C7D2F8FA27453DF91447D1AE34F20D88ED9928D93416992
0F7F6624B2B14B102F3409AF0E16C54BE328F1F84E56DC0A4771961D74B39533
FAAD78F695DC2BF3375382BC87CACD2382A4F3AED9A0475ACEDA28EF8EBBBD71
D73864A115239FB868593BEA28A08A48FB93542B6B863D865D82F3060101B0B2
B04FF2515A3A522C2B093F378C07CA4BA03C8C2F41E10CFF5C14B0542D0EEBA6
05264AA04599FB47CBE7CA39EFED6F89A650690EC1802D41AC83BDF394230059
30FFA8956A5761C1EA60A6C778D18FCF116131C2AA1CD2823D9C0B0D233256F5
10B1721FCA3CDC3DC7FDEBDF9CD0476241D0826B1F1CC1BB68F29F83D65A7E44
E1029DB0C1C5B0CF4BCAA5A821CFFD4DCAD2392A5ADC94F3F621ABC0983BA3E2
095F15E9A78F699879C32CCF86087143AD2D7FAC188C4114EB7405F4E2038F0C
72655ECB439CA3D4F780A58041164E64CC4490D44F9C158DAFE137DB95EDD03F
D7CFDD98EAB24D30A2BC198D7CC54867567B7C6EDBFE9AA1867B2B32C1C6B7B5
B21FD5054AFAB3CEC3010E043D3D8FE8475B87C18222102AE6868150C6CCBA56
A15C978EABE636D4619D8884CB8BCB9F8869029925BAD6B32C5EA6A24572219A
0ABFFCFA1B5E005CE04190A05363DF03717B7B2F494AF99001661C8D6BA1F78E
A12D0E01A054DA1FE6CC2CB727B8B6F7F9F555ED657EC6522BC8F05A829DB662
C0A330FBF6A0CD2B0E29E8E94C39C18A2633EE4D59E12F18EEC78A0EDE50AF9C
FBC19582C94EEEB947EB79F92719771EFF726D4BC7C7A5FB67502C05B884A151
C05113E4DC4928CFBEC291AED45667DF74AD12C745D5C8FC64EF4BAA48049AE9
041A7B8642144420A2F3B0517BEB6ED17C38E9D5189F81941A42DC63AD9EF93A
2E8D8D78F70AFFEE9A31C6211AC67AA28D36BCA80B6FD878D46C145EE0EFB46B
D6D3D605B7966A19934FC5F4DC7E01DFA456A1065EF834C7B146FD3D95D45D6D
35D7F1E573ABFBE779723FDD3E770A1D85B56048466F94C69E4728E8FE7E9DF8
AB96AD0636739049F78BE5C0AEEC0B9D143056D5B75958E9C0DA86087DE12B3A
D893D8967A75E3B00607640D4BEF7B1B5F01A4AAFCD959557B57C838629A2282
3CB1F149001D7575DE9D7B6D9337BA75E6159B094BDEE92FCEA136F517DB61E1
D3039E5F65FE3D71CA46A1BD339906E6333848C9627EC947E24BF1AE8A34C9DB
A89EB8D38657E4EB0E396E65799C7EF6BDB4599FB13C4063E25A80347B0F7695
84AEE11336C362AB454D63C94ECFFE6D4D397BEBCE1572CBFD63A0D012332821
CEC4B51DB2701321F8DB0463A024D9A28646AD00979F2B2A40EBDF770267AA9D
9FB7F35B34A4C960053AD6CB230172557C5EC4D1E9789043774A411032EB903A
D8957DFEEC037B43F9C72B59ABFAF1749540420A91749AFAFFB185D5177C121B
DB33C97C89B67A16D8BADD31C832B482D8FAB7BC1631BA1E841BE67EEA93282C
814B52F02E4F9D014C9AC307606D8DEC5A94F3643D441C792E662C2CC8D20E7B
2FEC522F0F374D194F984558314A256C554C63BAB2F728FB3E77666EB91B371D
84DEE5743D15DD7357C00C3BE72D939F8EF3A1DD23AD38B67482C53D58F76AD5
3A43E30046E873A60B73B0B8F0CD6B2A6F68285CD25977A73B4C73DD9168D6D4
F2D9077EBC356F85147E7F951277CF0438483BF1C35687CF41E262EDAD0827F1
CDB91156C850BC4C84C9010FB1D96D1EAEF7F54C4B7CB5A2CA87320C87AAD23B
E9D240C0A47A1DF1FF08C8F7C6055837EBBBDFF84C340EFDF690AFF5B2AC10AE
62A5BC88CAD0C32EBB4139C440B18C5D46F4074B66BC3EB6D74559E2CDFCCBA8
D7307A4D8370FCD254B38AC48919AFEEF7E011885E6E4AC9477347E3E6D9AFB6
B92306EC744918BB3B61A85E1B242EA8FCBFA18A25173D97119C98ED76194C28
DF9541B11B15A9A953BB79A53E880DEFE6853F86ABA18F9742C57B6F09B87414
7E1B345A81244CE007CE073EE8631AD0DF0246CB9BDA7E5EF6153E4E1481F0AB
17909E57392327D5E21BA8181664B4906DEB2E78602EA080B40036ACE0C6CF86
0C2188B5E5E2ED391D6D6D250D6E71730EC8ECC634BB80A6425EB96B276EAE07
DDAE955CB418925087CD091AA179A8B37F51A6EA4D6173DF15CCC34FD7904A47
9D6EF8743FFF28036C80CEC4A92F31D9FE21C2CF812CED3B67F6B17546BACAB6
CAD763B0796B52B9CE3455855865BCFD0D2458A4FBDA7987842BCA05F9EC6EDD
C1A62932DCE37E9DFC30D07A6898041893C50733AFE23CAF2B2A28C1517A36B5
AA4F70C86277C3F3DF3F3FBA8A62A144611BC1DAFF806638F662A413F98353E7
3F5B8935EFBE83E6A78A5EB38EF6BA9E6A2F7C2AD8EBFB6F8B130CB286543AB1
23A3EB65D1FA0FFB4924C75CB605EB4B1A15DF82CB5F80C5EFDDA790BC621BEE
8D402AE7DB2B5F5DF4C8F013BB32975CEA693611603BEA4173B503098A3120EC
7B4BF051591E0626BAED78A3F38959FC9FB33B716E16F68FCF93A546E2FA9FC9
B7C3C2BACB269329C468F87093F28D627A5EBA53AF2DD411BE8E42D4B100648F
0B851B8B30AD1E575C6ADE5FA46BD0268153A8C71289CEDA0A84C9DFC6A98891
051C033BFA27E3E7E29AFF0FD6F9A1390780CE7AFF81B25B8C300C301CA08BC2
50C824E67BB4212D40C0A47A1DF1FF08C8F7C609976E17E2DB02825A14670EA2
5D371BEEEA9A5B59E95DB3DDFA43722858859721148723137E0BCE9FB5446388
88E512ED42BECC38B0DBC80FD2A854E4ED473FEBC4F18467D1B3E960E1FDFA98
8DC6EC1AD70D9CE8072BBC4BAA55DA9CEF28A6960DF68C0C0C55602A039ED025
D7D97546EBDD463A19A92D9DF16646F6A148F3D78B0056DED9C4CCADC841A26E
E0D58D04FD7ECA65303AB42257F1B34211A60D0DCB1A3E610136D6E151E7C73B
2DA44C8A9F47097547E3505ABAA8585234BF376CFD75D53343D33CF75390009D
E228E4ECBD863862D228E2524B171BB814EEDFF5117F9E66700E415678CD1F0A
06A33C5351845FDD88FC783CE120CBD1E6B8984385D6964051874BF44E20E4A3
AAE67A0C31A4362C8E0C3A310D141AA7D2DDD0E9FFFC321BE28AE3867F209E38
7345C9FC4E53BA76A68BA319726D79508A26591C2583090B68545C4A69B44864
CD60AC879F57229EB8F005173C16AEC3CCADE31E226BD2185E10BE9D7A253E2D
D2510CB723392E3F9F7FEEE6AB45071B49CC0E773E8F0F4E1CA33299D3FD6A31
612CE183442C3E6A26B4F74C77114B2952B0991CF6E18ADBE47F6AB064FFA838
61D51618F600D685E658D41280274934D827EBCBE11434B4A8D4937DF8B47378
6211045BBFF388F3FDDF8A406D54E11C661EE52DD6227D8907EFACCFCBCF71F9
2F952A7B60645B1535CF943BF2862E7DA5897B0AFD2BE7D30EBC9FE8740A96A9
278F54A63E7DF0EB8AFD856C3D51A012779EACE634ED6DFC78D15C9A1E4A481A
602CFA2A75BBBFA7651AAA4619032968765E65BE3544B4F4732889790F22FA15
6EB858681DCA6F12E937890EC3E530C70FDDF4C4304580177D34E4091830E363
8E0B6BFC8969DA9FDA032DFFAA11B149ED60FFD0C08B8C76554135698E9AE89A
2AAE0F0DB0DEE85037F42DC622A83DCDF832A5CCB67E8982198428B6D079CBDC
056EDAE16884CD13FA687EA55E990886ADFECDBFE5B1D606E8E43DDE11E42AB7
65851D873107A1BCD4AA98F4A3FFA9F2085E5595C15109820E58B8A1B9AABADD
3F97BD3F25F8E449AA68EA8828FB7DC52CB0D328C386E13F0EEC37407D44468B
5B9FDFD30A8B3687273B66A5E58514FE8D52CC7CB37BE634011C1953CF0A5D2E
E095ECA1A0F86B718348A9E8270E78DEF6B3A250AF4D2F8F117B57FBC0A0970F
B43F50BFFDAAFB22092411843C2D0ABC624203BC9930C3BD546218CE3C509AB3
7AE526DFF66FBC00F181C3BF9AA6A878764E455181F1B1B61E9E409C4B5B57B1
A5E6E94DA233359CE5792E0E46EE893BBE0815AB8980B52AFEED4DA39F0B3D90
72C3E45ABFDAE6EDE996937A19B0C7204F5999679E6B4B810591C8413B85A616
205EEF9E04A551BAA6B894DAADF115257DE8620719786111754111044E6E6708
B76BC563C863A3D6B62B8BC293A7C2CB6C277040BCD70780090B81610A7D9AB9
F9C2C54F7FE078095C319BFB87E2E004C36BED267EEB8D7DC98EBBF55011AD57
10603546198444E417AFE89580D6E9EF0C8687F813350A32DF82A23F0A1A479E
7D64EEB4A331E36D5DFBAEDBB327DB53FC3BD99FA5E8791EF8061AAE3E1321A4
6049F1F4939BFD97A0E9C7802390BCB75BF41ADE04A99A0708677A5BDAE986AC
79E4AD12C8885B498F1F9B9CFE8D25F3D84D7928EB4E2FC01129193C740569DB
E8D96368CF5637BBAE7F5EF10DA668A7805B352B9039F5FB235268A0D3CFB1D9
703F1A17E3776FE26688D3A1023B9611727754189AF4EC871967BD941882FBAE
C825C73F518062E8A88A53C47849640353479859C17474B3D0C4B0F0FE41F4B3
3BB24497218073DA6929CD8D0028621D465EABB6B75DC3FB4103645D5B24E105
380ACE113E9E64339B783835D7A483FA023988169EAED22B2352A731D34333CA
08BD3F94A5868648AE92C2367DFD51557CD0E216643CF67A8FAD795BC07DC614
45D9E4CBC955C806C815E3DBBADC3D3C24FC980659158F5BD1BD0B7F4836A9BD
B94221EF653D3DFF5969BE76B9B45B043A1FCF2CFDCA9AFF90457B57AE05391E
6284B4DC8F23BC2365EE1186DBD233A32A1CCAD09B42F93E4ADD17016856943D
6895A88CCC15F46C9431247D8BF0742EB8512B21855566D70C09BE14D2E8A240
720CB824DB9591DDDED6C81C8983B5FB7C11F5B00D5FD7168C0E3DBB1D04D12B
8210E69BBCBFBC1C182978D99464D287C1CE3FF4EA59F8C2A4D4209ED49D597A
4B3F09C710D4F20F1745DBC1E0D8431446587CF27D98E894EE751F84118BCE62
A09C02B44437AAD1B718404261224F728990E3D55BE6105A54B6D96C4343AB2C
A195E391CEC5CC098CAA2F520A04B16B38EA429C4E6698361F0EAC85811A3417
AD06A62ACA447DA0300094620C27F273147EA8EC418457B24CA04839437B785E
F7082EA8A7DA9110B28CA89833A002F36CDEF455FF25F5E0A1EECD53345A9279
C832BD43555041C9F911491788F05E3CAE99AE48F8EDE8ABC0A23A888F1DE868
6F367C05B7DD044E917186B1C51631B3C6E0A556B83ED4532E4A4E5F62F279B7
393EE5AD169D7D3FE7D7EB59D754F41B74730FD83A69378FB5974FF7B2472B9E
0E90C0630A952CF06D0FFC6138CFF4C6904D9F0386BAEF51B49A16C0C9F6154C
40CF3B05B911B89D67CFDCBE86161B4BD1F2E369976282F36AFCF70E69DC66CD
18EE703A8A590DCC88B75531808A73968722570F8A6D6E6CA1014DA470C91856
AA6053114DE6B5328E8EBF054C980E39E700751C84267D5C9B589423FE8E386C
646710BCF518CBA0C4DF4B8BFB4E0890742331FA62393879CC65E9F78860F1F9
DEAD4C81F8D2385EA190C6F9D3A9540ECF1EC68E467174529C53779604CF8ABC
BFF9C8D0EC990E870E8084DAFA904707A0AA0A5480D5469F07521A6F49DAE440
2B7BBADC0219F29636A134F6343468C1A0CF27D6184238E19570DED42DA5EE9E
67F66FDAFD1CAAA4384D9BC80EFF6473B9802747F5A501A02B13493C27EFAEDE
E324F75512667EADF738B3302AF6853E5715CC80077D037EA8DC31714AB4CFAC
640FC9297DF8FD106DC9EB40B6FBB9B91CB42FF83F4D2C37E9A6126C4F0E485E
973BAE19CEA157955E74F8AB2426134C9C56E6C9FD074790CF0E5DDFC1E2E106
93C34702F934313A28D778A262844FB112A5C09FE173CA49CA457A0744DC704D
F78F2DC2C11E00A7578F142E13554C719C82246C7F93700C56F441D5D8F49215
B0E9D2D31533C6B01813AD146AAF909FFAAD963C89076916145404BF88B725C4
05389D46C775E47E05E621F9C79CD021CBF681747FD266C62F8E282E5CD3DAB1
FC6FD1C795EE6B7C338D0833534B7284F107340EC5569B2DB123925B20A1089D
1EFAD7BE9460ECCFB206B1396DB9772715D2B2E5141EB8E428CCFDAB8B831ABD
D88D1E1257A40E473C8A133231113267BAC93796EAAA2697D1F4DA6554102E7F
002DA1ED1DEC7852C62341D5A1054460A3D4A1EADD233ACBC08C6FA848AF4E1F
0AE4889A2148C86C506C078D494E4EA14DAD47912C144A873E70EAF6DF2A16E3
9690558332FA692C5E49A1D35413674AA6FA705B3037884A94A19375189688B0
CFA983F7A0FAF4980A11218E6AB23EEA2F5A6C8A7146345BEA1B27BEC93CE535
1D4B80212DE01D61BE8CDA1845E218E76611C0CD33217FD1DCDCFB538B2446C0
254F5D22642493A3D2E4D94223F345DE0197E53E0ABC54142D17FA06D485490A
FFE65EB2FADB7A25F04B1B85CB3201338E2B67F13C1C7D563C43E5F0F67A517C
75922E35FEA573020A9DB0969355EAAEB73E1ACDAFB83AB6CD0D962EF73C3A70
A627D2BA9F2D86F2B8B5FD9E1559FC277B01F334190CDCEB505AFB301E0E382F
837F4A45ED40E92F6241990D57A89CC59A00DF44213F566670EC81A5E16C84B5
354DAF3705CE11BC26B59EE964C6E5D9F989B451B5B6FBDF02BE386B8A0F4A86
724938F45332458D3350AA5C7F5F44355C98695107A2D2C949879319F51D1A55
BF6CCF7E101B6F33F63514F979901C98FECC16584AF52626B63211513A8C1590
C4B9407C8E602E32841D44979B8BBC6D399BFA142DA106271029E328536B3F6E
A7470352AF8173C8A2354933D10DBE790475CCAE7F7C5AB067CD6180CDC03DD1
397EFD265D94920A737752E2588D78821FC52A21E5B0D2BE000C1A70D0843D9C
B2C1B40B32E625B3A7FF4A548B13BBBAC6AD4AD2DEC5C068CC85972E450BDA87
5BE44EC6C77D6F8D8D46D5D8F49295E95FCFBFD2C69579BB97F88555F9928901
D24CA03B7E47417606997424B7D9EB0C026B33B0D3A2166DA6515907EF930D14
92C37372CDE5A52A19C2322FB6B85ABBCF489ECF22F5C2431DEEC087D8B47471
8963EB953FC542FF32DF248DD2D654449218636C01A0DA635F17CB0302CBD0CC
03990B988849F1EDA1F828B222B288616D764ED501A6A18C229FA83A47EBDC3E
B86440C57AA3E986569AFFFBBC97BDBFD19AF4C513B79DD752AA1B869B52FDF4
D649B7196C57B881D5D0462B0EE7B1431E18FB3A440C40CC117BACD43A400DC8
3E5BCD48866CAA9A3CF37414B4D9521A19117A056CBB7DC0EA3FDE819120E8E0
C42B085B6F069D04CFD8312BCB8B7F5A29C98D586F5F943128D78652D7EEA894
5B0E40A750069531319EDD5FA32DC85ABD349D68F0EAE6D8A6D62724A1E85426
7ECFD4F3DC54D583F8CDA9086AC560809F434D4AABFFCEEAA687BCC860B1E0CB
ECC7898D6AC135BFA75A95B807526ADEE264B1AA68ED2F8997F1A40AB54418AA
42A7789EF017D577F27ED9750A43D4C768D40F77F772448247BF09D6A0E4963D
686204151A8A791FE74A36DB5925C44280EA902781EBE5DC5F55B314E26422A6
A4CEBD1EB370DAFC0035823EA0E30033945240DC6C44E04A0D0262093F0BA502
549F052B691C922FCC63B9002D74274C11DB5DA5484396BD8E14FA2100211749
5689D49BD0C1CAB7946DC5199AD2161C45AB7666CA46FB73847D78FA320C468A
258B380A680DC0475831F0103E0A79E521D4C37CA356A5ABB68083C40FF9C1BB
956A32B091A4C48C7DCAB3FC6CC3849368056292F4F6B8E761912BD094E4EB72
C5517EA536BC895DD97EB54CFF70407209CC3E5EECC5B6161096461C95E19824
54888FE6A8F9B9C27FE492AB667E17E76C718E993BA20F6DC3C0D3B0F33E3D42
259302FB6B3FEB02AC3AE5C5118664B150164F451705FA0ABD9581F43769179B
CE78BA0068CB6062845488B7968E06D4208B3905B76DA60A3B7EAD188847EA1B
93B5C55803C7080A2A640B1244D999A6FF64EA0324A3A760D1DFCB75EF11E395
B5CB6D289F41EA8AFD4A3364A47680E82D069DB12F5A91404CF583B97F788A60
AA13D90A32A517A2A5FEF902A5022F851AF557C0B8796D769B98209D5ED71560
CA09E39E26DF4BC640E0A70908EC73B81E95714793DBA821EBD1895D65A9226E
25B5EC0B15500DB9BD7B5C20A2D5D27EB6DCF9A11121F930A43EFEF3641DF730
2E219721E4A0527BA7EE99D2551A5869D10C24FA4195B170A7946D40F533B9FF
ECAE91870924C3113CEF92C378464CED1A21DED56F8E6336671AE7D28220EFAC
36AC8CD449BB6245B8572E9CE384C4E692AEBB7771FD36E7202BE4E1B1E5E696
1B7DF694D7ABEA9AA9281936DF74FC046FE8CBE8A5E2A674837C745817CA28E9
89BA43ACDBB62E8E09315A077A53626ECDE3122F7BCFC2CEE1094A0735040B72
822E6A674F5EFDE49FAE1826CE1209DD13BB406D7F063FB3A768C0156DA72848
745C4BA708CF39A213554CA0AB0124492B397CAE8DFDF1A0D1FE4F0C41168731
A27DD7DA80F627199D0205C60458A32502468326D0FC48B5F46F7905DB2E021A
1ADD96CF2AD3F92416CBF6C0D53220FACB53DEC9202FCE3601AED1C841D2D977
56A81F1E1A7131547E040F5F6ACC847CDA77A2EE73530D6C43226C807857BB5C
E0C08E8F402B5CF580024B834708DF07EE15DDCBB38C2DAA5D9E32884E580055
CD1A896A3E69FC23C81515347A01366935CA7EF4D761CF20D1BDD9B918062C98
06983AA9F029D9E72847EC3324EA98E20548A2CF3BE42D85645C5D725C1EC2AA
BA7C603C99591FAD26B901D283A3B8E481D8B5C5A248EACAC72DBDAB88E34AB3
832419EEA4443F21AA640AA78A5AE4B9BBD3857FE4186770EC72666B1ABED663
5C7ABD2368C3962E86A65ACC7E68357FE359398F2D2982817143672549463D50
05BDCA334CD698BAA0E3D1DB282862376F6BC9160EE2835EAF4F8CC12151A4DB
12803CFE4760B5AD85F8A25DA1CC90F2B7B8349555DDF82D549554FAE660053B
F4075A54FF5DE35EDC373AF89372E087C014E687BFD76EB961B6D7DD2B089FDC
F3CBA0E3A1996724D31CB3A0EF60A20EB9C2F65075F6D9550ECF484A9BB91571
2E24D798221FB06025FB4382C8272E752137BCE249B6D29A3AB7A5461A775194
49E79298CC5945F29F80E00C0F4D344C554209CF14CC7C5818DC091056497346
4AAC5DEC8FF6C9A9F409E8D012DE95F32E5E1E07C9503B47CC02DA801AA118CB
F676C4E6A1C2F027CFDB087E776901598C36BD8CA4056CF63C52DD02295073CC
BEA51C346638B2A861EC77F83297BE03F4928661D3C018B7321E63A4E419CD83
68BCDE5BA120DA482DB94A6617FEB2914091449B9301BE832CFFAAA7F2F61113
7B7DACB165BDFF0FAC337A4EE5A95AE15E40C313C4E1ACABEC570DECECB768D0
627C7C2AA55142AE6CB5ED3667865BD39F64AA14A095F6D9E0822C5F3B371BF3
603E20A7F869EC9B12426D220EC981E3B2E068BD35A2E4D6AFD9DF1F559528B2
F78DB6BB1947EC8C2D88FD550AF4B902B396867C9F147D136FA03D799029CE01
D0CC0E22DE1AD5EC88699B3DBEB852460380F3F67EF2B680020E1DDFF4464AC4
9E4B8E3821635D8565844FBF1D5AEB238AC7EE14141E02C64BDBFB450A08C60A
9477CD633BC76FD991E2BFDFD6BB76BAB7392E8E711483348AAAA7C63E3C704A
A03DE8B811E081D3B0B0BBD3170B78674F423581D283081F22D3762F7A8FE247
2F01FA507B508858B3174D266F437A10A4F1B94B335482D6BAD3BB3D354DE76C
2DD1221FA8330AD209AB2F31A131A3642B970589675C0AA9B7D9C36B64CDC70B
8DCB3213C30077651229E66C594784DBA4ACCEEEED9A94573C73377C1A578CFF
BE68AE4CBC14D4210E4900DED65B2820B94DC7F4933EC8E7A011AF17BB14422C
329AE0BA49A5320395998ED646BAE50F283890E01BC8B01EAE5B2CE953823012
F0BDDDA4E87A96B8051A82FE62AE06FF96C0AEA7FE970E5F991C58DE3A29F152
078346A0DAFE9BBDBD59894E15D502CCD6075AB5D61A801701C8B98FB170C568
C58CB78E45E7635073B6471BE1BC3F2D975F4ACE103FD0538805984CB72A6318
3AEFBB1270035946404C7C151147947E27DC026C52BD8B96F46B82A1C85E3A3A
CF05CE517257D75E13B5F6588F762B3FB6AC99645B05468A28C650E3F6C38E0D
CCA53F567121A1595B726CD2B9B1844E0B3C0179F11655524F10C01D890EE268
9F2BEF91481B19B12FE97D91C11AE3C262A209E01DCD82347811F7C3262CF327
B50EB051595BB4FB830BF108A98A057E42A1925141448BF83EDB48C4676AE0F6
2293A9370386AC50FC80A220108282768F39E9641FBFA3BA57DD77E27D21F49C
26ECD327514A43947F0701D6A8F1697B4F4B5763E628A466731CE6F47CBF1B70
01A618CBF676C4E6A1C2F027C74A4D95352286CD7622BE4083619F5CF7C0B8A3
FC6DD50CC0932402AA5C039E02B7C7F7C14599BCE0A29E32E05F62318B18F5FF
28B9A779EAEB3486154ECF786445584414BCA564B884ED7BE626B82300550EB0
E4BE9A1A4D5596B353BB9A39F2CD165C0C1C9F0191D5028660219C30143E4F78
9CE0127CCE8405DA733CA5DAFB29BC4A761605889FAF87884BB606362F3CD153
881C88417827D65EC092CD5E359499984D8BD5515C47A3029EA61BD66B3714B8
E90D98C8D3A5A6EE68BE184143A92178834CCAE4E5C4C3CBA20A2A0E2867E730
5A0836C5C43D7A88DB60A8F02A342BE3C35E00A451AFEBF7AC2D2FAD975C89DE
AB698713943E2688FE0691605E73647A7F27D5DD53A75D32FE863B8155F5CFF4
8112F034EBE295E6B2B40C7843C64B7237E67F6CE71E26D1B502B12AC9CE63D3
62FF626745ECA614E7E59A00B3975941C04AB27C501A92319232969C9060E2B7
1D71398513B9485EC1C7F2F3CA64F0CE26E345425A476A4A24C75CB605EB4B1A
15DF82CB5F80C25BF42C9C8EC904F9B5F6B21788C91C86124F4756EA46811C3C
1B4144A157E5CCF00A362A2C3187AC8A49B118B31B1944AE889B84F15DCB91B6
17EB72DD4F6B4CB9EB614E23F7D328D3A003B60F08C7D6A1ED696AF20EB10948
24C027DB9A48F637ECD67EB37C299F7A6109C08B395CCBD9F6CBE68F5CC53D80
BF9FEF50C3BEA020692F3CB62A89F00CA36D0B37F7BA20C7479595D4F9A58414
AFE694C7CAE8040C82B29675E7B570D88781E47C79CD45405C5A15AFD3065989
2DDB36641E7E452F1CE506264DEE6FE1AB65672ED471DFA741DAC94750B607CE
0685BA14F433A68726E199AE43740CE4C3631D7A2D16F51533414D5273EC263E
6C90B8047DFA47224C9F7FE7020BAA032922CA893A1DD6D6536859314C2D740B
E6131B6EB15B409435E703C2646CE8837EEE36EA9D19FABD50B54B61C1D7D3A7
4B55E2D4CDA8C2B197CD78B2E2949BE9D185388E722186EEC417AA6A483BDFAA
9055EEB5474725F376AEBDCFF96A838AB58BE0907A8737B566F6B661885A88D8
8ADA1A2490ECA0C4C8F5A060BAF86B39EFC0A3C604AF022DA08902FC11C0D332
291CF611A749C5BCE2F8DD1E5AE2ED210139779DAAF3AD7766FCBC3531E48EB3
98B2E0A4FF13555DF8A4613E4D5EFEC8F31FE0116E502E847F9B9994F5B97E3E
3FBF8B186BB9E3F6C85E86E42D3E2C155D2612190636001F4F1FBE214A3BB4A5
339C6414304938B108F718080B57E132599C4B87CB846D4BF9232CCE06A76141
D7A018B855DC9DF9EE9A45B9C4F085608765C46EB3918E9885943010A8FE1E1E
71AA78A1F37F4D638184859081A641A041DDC8247095DFC52325CF2E955366BF
278E6931353AF93A55066C2E933F233E8B2ABF7405C9E6A7DE351875F6C9A446
D2617C371AD2532EEFE16D6B61184903BDCCE2A29CC5D822C902542159CD5563
04B0706BF041C94C69C52A10CAC92B0797073BE7E6082C836D453585C9905EA8
15DCAF1C121CB3128A7488591E3E279D3DD3338681C09634D9A225F848F15DBA
E9B5C7F3767BECF1C789B40BC321FFF0B0FDF48A94C2EE1671ED6A14FB3B6AB8
43661D726290D201501A8E7982D260ABA2845D66672E28B1C5CEC739A140228E
564F0001B1973B883DFB57BAA66FDD4CA34A6AC0A13DA2AC0C45D348A1E61CA4
5D557DA3262FD735A50BA9D0942398FEE159A7BD1D4ECEFF10D36DEB635F847A
D762ABFAFDD1A1FB779FF3B8C931D2FA8D2B7542D40779816DF99B2C4C3E5BAA
F3EEB7437C18949FD9BF61A74A75B484F6FBE8A7C456E27318E8C26D59598A7A
57095EA6F4C332816F4B838046CE4BAD1717B483F3AB444D9B439747E6B700F7
B8D69896F7A82837DE22CFB3B0C9C3E03F133F0EE49CB63C7922F21ACC3CFC8C
A53AFC3C56AF7CB50C5F8742746D378D38A1E25B2A8B2E3907FB59A93824DED4
203A60F8B73656C412867B20A1248B9B7A84E5AE76314344E385DA4106B38C91
A4C760C013B3F21A12F89228B0B0663BDCE33DB22C073CA16242DE1B24F8DD09
7EBD4D7651BAAE60063291437656EE331F4DB7F490F905E330D0124D5D1691D8
C1ADE6E9CF1E1EF3473E7C6AC5A900942739DEB8C00A2A052954E2490763E190
FA8FE95129C3266165E3B1C720388FE7A5F39F303D7B748839486A651FDD7810
47D406DADA99113C8540F667B1FEC5F891F30DD3D978A78A4ADC04F7B7D328E0
9D407DC64BB7B246DE131FF06AC9ACE09E2E05A5B7E3074054412A33979B9FE7
F133E27D6D769B98209D5ED71560CA09E39E2E535A462DBC4364A0EC97F3AF13
5AB26A74D3846BD2965CE1854E36A83CB092607B30F8A2F70C4AF26DF9999E3A
BC94000B2D142F6549EC4D41C1A9C8716159B63D45B3AF2FE2CDB5865C856A45
F16B65FA7D2C68B29971E6C53B5BE9E1A8809D965B92057B92744B66F2914717
16A02C182DEC18D943FEA0F7E7607B46F561798E4D399B65AE5863C3B21A86F4
D25373D726873AA5CBD30EE45D04A7B420DEC645001D80CDB19B59CED0C3C74C
8D0C05A9672D2808BB68491A24F2CBE99DAF861394ED682BD0D30756F71D1B32
04A73D053CD6CEC48A28BB81C0C3CA3487B25F4361A920A3F5CF1FFB7488FA0D
38D79336D47A4C62566C08D7004D0EA051919D3FE324A15B6CA922EA3648C55D
7A0A109123DDBB61185E8488941CC7668EC6C6720A424F4422ECC5F69C4B6E1D
0B583CE26D4FE885E1210A23CC6198ECB6B48E9137F103CEE329C4494DC0DF29
342C28FA232E4AE96F527E0F531219C0E8FE516ECF44C196954CAF9CE8F268D8
E800649664A92576D75485DC48C5F12243FEEDD0C96ADDF7309480B2D66A5BDE
8CF75B408436836F18B8C97D9FA6F817B9BA64F2043341A0E84DE820186C4ED3
3D753CDCF6E2B220B7DB601E0D6F71F1B26838D8B26A69C860E59EF4B244CA58
056E53F69B1CFFAD786508C2D3CA63159A0300C7F03BDC406E5179851E74FBCF
33BC92A58074E87BB7E48C5142DF81643DEE3894B23ED81A1B1BE73D1E6B2782
FE61712FF47DEFB7424D672452A43EB2806E7790AB688B0169FA5B622125B11C
5A23AFD9AF29B19C8236E99EEC891FD4648F4388EFAE6020F1089B6ACDD87AC8
98E1E40F8AC61C3C816A300EA2BE58A23D16C897B8EB2931FFAA61FD34708272
4CB5A62A4BD7C5BD472A0DC52635C1317CD71B2C89D4B906997D55393D0FCE19
A9BB736DC0DDF1CE250F72D216FFA2B1A7E24E5194954A8F52763577E76FD439
D53BF06DFA30612CB73F0C4EC8E64AA8E25C4BEE7EE5E366FF190BB900F3C16B
800786BF9710DA3728CA0B3FABDFD3366CBFCD5810557FE3472F01FA507B5088
58B3174D266F4BF1DE7A74946962DDD4272CCDA13608EFD1AC4F76D360183C6A
CCDFB41D519C8EF5A14FA8DBA6CC4BA0E2E8E80C72091B60D452B459DBEE4624
71718C19D83B1C66AD54FD6CE1454CFCA96EA11A2C7BB9C05E8C9FDC96111549
E91AB66976B6A92BF3D6021D36A6B30547145EE22D07A9C3C43912A7611D63F0
706BCC02E0FB6A9BA174D8A84F5D696D871D7C735170E55603CB44D0775BAEF8
08D2FEA2BEF33383AEDD4F13BC17AB363857C1C0E1D5E76534B21EE404D51778
BB5C407D31B78256CB9BF699DAFB2DBF8A27345B1409738DCFB5CB7A37135058
7504CBB81FD21538E323C8D7EBA4461B4F1564E190E06D41EC9D1EF6E296C956
BBF7CD6AB6341B5F223E9C743FEA0C3B0F9995EC08F0CA2AE5DA54E9306418CD
7E169510940A9DEE32743BD50D619956564DF7746AC013D8BB65721C4DE2470D
2D3CB01AA1861DBF4B44AF3161BCDBBEAD0F46F1CE20D0966D23A12CD3AB2BC2
E8E6B52C90F40A651EB58CD9A51ECAF3C9217175482A2585FB02F8C1AB8827DA
521F71F0E76C8C14C41330942FD866CF9D1439CC0DB5000B60C38786CCCA3119
47F0D4874D8B7703A1496CA2BD76BF861DCF2ECA6CFE2E28736914125E1E3031
F89A57F1BF122E057CCC63455CF2816DFB0214A4CA30227E5F97C18ECEADC226
724D1B575A000CFC63A71799051C4CEA817B5000292F174274A9E2F58E923915
1446811D5C7133354B74DE079EE97EAD7B2646389AED409303DF84A000FB7004
0159142E02D4EC0AD9D97B0D1AB9AF519C586F6BCF6AB4FB10D2EC175BAC2DD6
D9703EE34ED50691600932C8FC19C9782B0EFCEA62D9FCAEBC0ABAB2FF372090
2A7E5644848A57346228A2E88828F5BEFBD6314D9051C9CC94A76072808162BE
224A0888F4BD7840EFB8F43907261FE29ACF10C58605E0FE5D0B4B587B2AA2F5
42AC6131F5B40CEDE1096DD623C344B9FAE0A30EC18409B3CEBF9A8EEC08B270
14A84F5924CF79F230C09354A99608ABBEC8F6ABDCB407CEE75B8CA54B43B15A
A81C73D39DCBF8FF3886BE30C5B9E462B791C6FB6DCD1B73300A2E002747C95E
27C4470E3024A309D0EB598A97F4BFDD4D8A45CDE2DB8169D82F227443D9A504
C2377595E900B6C1467DEE92F791A05393788F0613375989FEFF4282F15A81B9
6A24B40F23E9696D73C9F08003DBB967CA5876B77A73BAA8FD1A115C632910E1
FBF1298F805368485F33BC13F049ABC3E98FC118E144743051B24275694CE769
49F58F31816635D241202EFFDBDA59ADA65C98E13907BB59D8E590A22E977821
011B3E5090DCD04103D1A6086DFCD6F3C9E64321995C8F1AEC8D49F8BFCFF80F
21C966B89786E207A5C80E2C83F952E9BAC604F1BDF8629653120586E42BA538
782002AEB7FBC07F81F764003D85CCCB15B587A1B4927BFBB3B3E3B7AA0FF50F
0BCDD154810310CB0C053C00D030B90D1C02456865D2EECBCC9261C198D49232
90AD2E7A8FC7EC93D52026755C606AC2F76C75364BD7A4914E7CD8309098C783
CC4685077AA3E2A2A8CAE65591627DBB33EAFB3083D3EA9BC1E04FB8004DDA1C
21A8EC2D2F3C0E5D00FF194EE62150B4689FC0FF8B524CF2D70FB77AB42C2E71
871E9AAA8811229E9441F65C0949E59B60EA999477C368E359D18DD4A7C24345
2EBFC164FABD6E0DCEEDC1FB4B0ADD3158A163E2E0753A66DCE85044D5A1937E
E1710A321725AE126E530CC560BDDB77B0DA60E4AB2BF38896CC1749C3C94D1F
D9AF0CE42BF741AFBDD9D24624A72B1D7674B83D5447609C95B9977E2A7B3B8E
D36221E23DDC520139351B4312686F8F9F8C86D8D507AEF1B71D9D09BAD69D46
B5B00567877BFA0B9018BCF71ECE5E523BCB2EBA36143280C65FB0C8C42759CF
4EF37B0349DBFE5F743FFDA8A8C0B7DB1B82FD19C81CDAD3AB1DD6EDDB2FE1C0
A2FCD47E5007B9EC99F1931E3064C18D2BB21B72447C98E9157BA2EBC0A4FAE7
2F75566CE64E9203DBE118846B47836D425FD2DDFF1C99E67E1975775B620275
82FB88C242E4E8FD495479E5E7977438CE49DF3913DEB54B4E33B94AC533D473
316178CEF28EB6DDF2C2206D4D6B08C5D9F4F76CF3D0943A1EB5FB5E32902210
B5F93D6D1F58B7CC0CEC0118A7769F4517E8D2F5F4802FF6AE3F170F935D7B9F
8588A4A534AFCB8637B52BBCAE37BCF5B4CDA5E58A7EEC3B435F9429500FDE50
1A6BFC2B6C259F8ED3E80F08257CDC8FD4860E31EB5605F18B24BB826EAE9ABF
10D117F9D3E0878EAF2A892A0BB4D0EA5778B0D747812CBED8EC4CACAF1599FB
762E7817AAF4DDC008B69549CEA073789157725861A1A41605F3C32087623693
D3464DAD087639203084CEA25DED422E0D2F40F45E5F9AD3687B59B80C647CBC
2F422B872491CDD17EFE2D72064C2222F31790506FDD77D2F8117581D1D27986
8906C02981DDD546FE0DC5A509E50078A4F39E14E1FA04F01B64C2587C110C8D
0D1880A446F9C2FE922A89BC0B100CAFD413AF1572F6C3A70953AB89F04F987A
3DF61AB8F22FD1CFB4E40FF4068BE9A4AB5AF285E6C52C610830754F920C9415
F50D0B6B7C460EB61FBE02E843CBBC224F848C9811A8A266BD7FCC8B8D8C8490
D521A76E062778F43902B9CE1F98079F73F7F7C34ED8E71AA887AA05EEAA7B8E
B78D614A1CE333DEF607408F708A893D1477A34A2757FED24F1F93990B010172
63FFA533C8EA3555BB7FE13162F354BB2765B6AE140F9DA77BDA7D2E50A63F8C
EF56B9B4D641CC74F6AD481C356BCB10F893048BFF4210BA9A804270B636E9B5
F801B2535486669E3AF75194641E8A42370E9FAB05AAE4A608B8B4F6C12F9968
AC756AFCCCB9B99B594FBD387A0CF674E21F6159B8722D46E0D8A86C0E167E22
00B33E9CF4F94A6A0265F957C95CFC298DEE38C30C0DEC67A843F25A10F54421
B3548083D8829444976A9C58575020C1FDA15FCB8BFC02BBF21A7AC9CDBED28E
C30CE2169D53CA9FD3EDF84FA63AF640C2DD2DC7698A8D0730B5D75F2AAAC6BA
B097EB167A3C769C57C254179FAC8444AF42679C379F4C2BE6FDFC54837DC689
72564CDF543CB85D6DC46261FE12BC6AEA7479901F13DA48980CBE5CA07C0AA6
9D4D3C836E5D0383419CE7BB2325FFC89199876F4928990E7C4F67FAE629ED97
B1C9BEE0EB7EA0DB99AD9E0FC882A320EE177D0AB2DCC7040BCAB291D604A3BE
BE97EA5A218A236600A8EEF3FF0990094B86F1622C7615BAE1B81300E819C410
C9701A81C91AEE330BE66A16FFBBE240A36624B951F7354BB8B26A4AA3DF84D8
BD55AC0DBEE2A2EA5B6A54A1496FB47B7CC429195DAAF87858202B8F19E44EA2
5BB2268F3BE4FE8770F581362175252AD14DCCB52017E0C70C649754265808A1
16C77861B304E8BDC54E09B883B0162954F104710DEBCC791068DD1659B0A2C3
71CC41E2945A549E2F6AE070F313487D2D54DA50BB3CE8990B914FBC60BDEDC4
CA92D34ED46EACF8DDCC773B806EA277BA25410AFA78364D466A28263D8FA441
AF48AB7F00AF86AF31BA2666511D5E9AEDE1346AF8DCF7D4336466A974773D8D
EA69F2CE7B4B02ECE0113B3DF692257979AFC9F6C279C7A0D15F7734B732F53E
4CA21F013881E302D88067472525E40A4F1196802D418BF8F7667E2092EF11EB
63633E97B312A1D915558002E37D3FFF335AD83F4E0B2D35E97696D2F18769E8
29107409952DB0FF01C0A35248DE390810239CA5017CAE20D62CC4B4C0AC16B8
44989A4224745DFB240D7F21DB72FF445A8C4ED36053302C1588B2A8C5BE5844
04F80C6862D707AFFA5E5DD434701A290433690BEF477EA4023FD0FDD761DC4B
92A3F57F10923AB579848D7B42D6258262737DF9CCCBE96F3C70CDFFFDBCCFC6
7B8C943C490F77EB2857FA202F6CD7B1DF2004E22238FB24DE4EDA484A5A46C3
06ACBF60ECA76923E132B3017D08A9852E19B644EAAF004C92AE3763DEECE2CD
E574391FF5550E06CF42C99FA5755A28C2F70709936A4FDF4FDAF71B892475F2
082F22368135C750F81ECFA1F61610FA8390E6F325B1E7338486612D404494D6
1AE0C181013CA2A04DE863423E8A8DCED02BB487FD51CC1FAA773A93A3D6D5A7
06281D9803B6280DDA3410E5786F63465CE98EFAE4C2E84F045BCE0E04B74FD4
8C53D39E2ADFDF87F8E2526A20323BE8793CC6EBFB5B2994AC51DA4541F3CEEB
44D1F17DC0A9105792C60BF610B5BBF1E6FF648A0DD40AB080FE14D4498BA205
6905150F2727E8034DA9255C81AB5CE0DA747BE4A9CF0386D274348FCDF95DFC
867545DCB3FE45C1DD414546014D58D00ABCC6AC9C9DDE5482D97B45C223FD13
72FC83A9DA0A6F24337030068996220351F0CBB4E5DD4B8DD008086044401C63
290D940EA92B03249EC07FF28917471B2F6CB775A22199B39EA7CFDF5FD77B6D
207228BFBD08C24060E7AB6F944A194B7D1832D6A9A6880B3B966F1E89CB1061
27B4654C380787EAC29A7D2DFB31F0079B1F3BFD884BD4D82922E21377DB7B1B
EBCE89E12478AD2999BCC00EF0F3432F4BE2E86096014C23B1B2C6B3662FEDD1
2951C340D8A76D41F65403581CB91777837DFC584E9C178559791260AA143E3E
86AF5E5ED8C4A369B75C5F9B2ECBC22B06D9CD5253B5C3029630CA1DDD9760B3
1E8B6171B5F4B85E5626B8039040133AE8F156590DB62B5315DDE1509702A0A3
D0A883E541AE686B66405110357F3D90E2262FB61884723EE0CD31AF2581CCE2
E9A397EB676DC382FD01A06869ECDF319AC8F495C01019F6CC6C8B09D38F3BD3
29C033FDF4240D602BB462B6956C300570A234BF53AE243CC9E2EB5106654E85
A3D0BCC8AE0E803AFC2FACA553C58D0A70140284CF90690E79421EF266A99663
FF178D2E5B7535C0F8F01FDCBD6F3E8D2D67036FA83D5EA3100385D7C733E784
4A8AAFC2E7011D44542F9D01DD31D86F3F0465FA93AAEC427AE0B0E485550C56
3ED9C7FCCFBF79FF6DFE070DCDD3EC0B2F2BA50C03F76E4B3C073885F766D184
CDFB701A2AB307E6F3429398B3D01A0BC44C7B7C308A81F7F7025499FAA9C296
F71BF7B12E24DF37F31C08DD8ED54452C32198AAB82EE40FA7160ADDF83308E5
60D58F235FC15FCBB78C0C47C3A66E0113B0ACAC2000B8A7D5D59A5471C6B8F2
C92DA9318E198A0B63995F6AA3B8E6FAC371C7C4475BF80715A6A06F74B7F930
6A01887E0481C347E32EFA3C58895670CC67CB8C65DB77431526F464D1171D9A
37086447B88E26DA1127EF17EAFCE1792B13D697F0288678967949DD178E0991
45B7436962C254E4A2AAA3386DE88AD30CBBC13BC5511E8FE74B901DF4D6216D
0C763E00C0C69C86DEF7A701579EF1737217B9D7753624A0A9A56B8DB6CA7AE6
35A07DCB2DCDAF14BD537DB3DAE7D5B8E2C02D2981091A1619110B15E2F384D3
5168D9D220B62EA8DED7F22F9799B941E342CF676A8B35BDD077B1D28059BD9E
1B8DF3E7DBB5ED899100DB6D2840D7325168815187737FF3D7C0B77960941888
6F82B1FFB7E7B488F31AD1BAD0925C5FE9BB39DFFC8E1295B89E1D127225E8B8
5CD4BBB85809DA4246F8F013CA2EE8958C4C28BE13E3139D0DDA49B891FD0B13
2032F62F381CD5487335E6BC14CB392E6F9C26B6893BA8F6C5B59E1BF80EAF65
ADD3F022206212B6FDE39763919155A830AFC3540E216E8DBCCD0A9FDD8E192F
9A086962DF6B40C5EFD9B3B828C10DEC5132F2E972FAA0809D33BA9EEE1CFF74
E7D796C1CD9A91219677E76635650E020DE8032641AF10CB1DD3372922E0B512
A2F54A0D818D3C344B32124912484EFFDD4EA8978098B70FD27E56B06D95236C
4A7C231FF5F8F125BE4E85219EE4E31E27C512653714272178D9333AF7A66A07
3E25F96752FBB0B8285768544A4E81EEBFE7F30D86E95DCC71580138F6823819
0B5A3A6FBF29C78A3EAE8ADF1302501E87DD5AFA4B10F0B0584805048240914A
120B41F65951DFA1C69AAA7BBED48809584FFEFD544D712AD2B795385C24DE50
A7ADE6F5D16F5CCC1EED8C34A2E90FD376B9DBC4D887F43E9FFEB9DF8564B6D1
C2E2AF0B3D4093F82878E049400CE53008A41E24AD1294ED242509B276A70D18
1BF468E8AC2CADB74AF312F5242D956C616C10576843CD351022E60242AFD56D
4968B84A2E8C8605BCA63ED9C83708A865D010B3D9F6B6F231E977C7BD59C770
8E69C38DDDC6B9555BDE276BAEA3E9A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 21313290 21313290 1000 8000 8000 (main.dvi)
@start /Fa 135[537 19[611 100[{ TeXnANSIEncoding ReEncodeFont }2
1040.55 /Utopia-Italic rf /Fc 205[551 551 49[{
 TeXnANSIEncoding ReEncodeFont }2 1040.55 /Utopia-Regular
rf /Fd 212[729 43[{}1 1040.55 /MathDesign-UT-Regular-OT1-10
rf /Fe 202[386 2[386 1[386 48[{ TeXnANSIEncoding ReEncodeFont }3
728.382 /Utopia-Regular rf /Fg 165[667 90[{}1 1040.55
/MathDesign-UT-Regular-Extension-10 rf /Fh 134[622 4[622
1[622 1[622 622 622 8[622 23[622 23[622 1[622 622 622
622 48[{ T1Encoding ReEncodeFont }13 1184.46 /SFTT1000
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop gsave 1 0.925 0.85 TeXcolorrgb
clippath fill grestore 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0
a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@9}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray
0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1
[0 0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0
0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def

0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def

399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@10}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo

0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0.0 0 100.00128
0] /Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions
[ << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0]
/N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1
[1 1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1
1 1] /C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0
1  0 1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111
0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@11}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1
TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [1 1 1] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1] /C1 [0
0 0] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0]
/C1 [0 0 0] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0
a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111
0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@12}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a


0 0 a 0 0 a


 pgfo
 0 0 a
  100.00128 100.00128 0 0 pgfe << /PatternType 2 /Shading << /ShadingType
2 /ColorSpace /DeviceRGB /Domain [0.0 100.00128] /Coords [0 0.0 0 100.00128]
/Function << /FunctionType 3 /Domain [0.0 100.00128] /Functions [ <<
/FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [0 0 0] /N
1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [0 0 0] /C1 [1
1 1] /N 1 >>  << /FunctionType 2 /Domain [0.0 100.00128] /C0 [1 1 1]
/C1 [1 1 1] /N 1 >>  ] /Bounds [ 25.00032 75.00096] /Encode [0 1  0
1 0 1] >> >> >> matrix makepattern setpattern fill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a
11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0
a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@13}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
22.50027 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill

0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0
a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@14}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray
0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
21.25026 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def

0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111 0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def

399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@15}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1 TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo

0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [1 1 1] /C1 [1 1 1] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds [
20.00024 25.00032] /Encode [0 1  0 1 0 1] >> /Extend [true false] >>
shfill
 0 0 a
 pgfc



 restore
 Black 0 0 a
 mark /EP pdfmark grestore
 0 0 a 0 0 a
 currentpoint /pgf@refy exch def /pgf@refx exch def
 0 0 a 11111 0 a
 /pgf@top pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul sub def
 11111
0 a 11111 0 a
 /pgf@right currentpoint pop def
 11111 0 a 399 0 a
 /pgf@bot pgf@refy currentpoint pop pgf@refx sub VResolution Resolution
div mul add def
 399 0 a 0 0 a
 gsave clippath pathbbox newpath pop pop translate systemdict /pdfmark
known {pgf@refx neg pgf@top neg translate} {pgf@right neg pgf@bot neg
translate} ifelse gsave pgf@refx pgf@refy translate mark /_objdef {pgfsmaskxform@16}
/BBox [clippath pathbbox newpath] /BP pdfmark grestore
 0 0 a
 save
 1
TeXcolorgray 0 0 a

 0 0 a 0 0 a


 pgfo
 0 0 a
  << /ShadingType 3 /ColorSpace /DeviceRGB /Domain [0.0 50.00064] /Coords
[50.00064 50.00064 0.0 50.00064 50.00064 50.00064] /Function << /FunctionType
3 /Domain [0.0 50.00064] /Functions [ << /FunctionType 2 /Domain [0.0
50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  << /FunctionType 2 /Domain
[0.0 50.00064] /C0 [0 0 0] /C1 [1 1 1] /N 1 >>  << /FunctionType 2
/Domain [0.0 50.00064] /C0 [1 1 1] /C1 [0 0 0] /N 1 >>  << /FunctionType
2 /Domain [0.0 50.00064] /C0 [0 0 0] /C1 [0 0 0] /N 1 >>  ] /Bounds
[ 21.25026 23.12529 25.00032] /Encode [0 1  0 1 0 1 0 1] >> /Extend
[true false] >> shfill
 0 0 a
 pgfc



 restore
 Black 0 0
a
 mark /EP pdfmark grestore
 0 0 a 0 TeXcolorgray 0.8 0.2 0.4 TeXcolorrgb 7145 -6127
a
 currentpoint currentpoint translate 0.75 0.75 scale neg exch neg exch
translate
 7145 -6127 a Fh(210522M2300)7145 -6127 y
 currentpoint currentpoint translate 1 0.75 div 1 0.75 div scale neg
exch neg exch translate
 7145 -6127
a 0 TeXcolorgray Black 0 TeXcolorgray -5480 -2961 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -5480
-2961 a -5480 -2961 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -5480 -2961 a -5480 -2961 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -5480
-2961 a -5480 -2961 a
0.8 setlinewidth 0 setgray
 -5480 -2961 a -5480 -2961 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -5480
-2961 a -5480 -2961 a
0.8 setlinewidth 0 setgray
 -5480 -2961 a 0.775 0.1 0.325 TeXcolorrgb
0.775 0.1 0.325 TeXcolorrgb 0.775 0.1 0.325 TeXcolorrgb
7824 -1854 a Fh(entropy)p 0.775 0.1 0.325 TeXcolorrgb
0.775 0.1 0.325 TeXcolorrgb 10000 8397 a

 10000 8397 a
10000 8397 a


 pgfo

 save

 0.775 0.1 0.325 setrgbcolor

 0.3985 pgfw

 save

 restore

 save

 1.19553 pgfw

 0.0 0.0 moveto

 28.3468 0.0 moveto

 28.3468 15.6557 15.6557 28.3468 0.0 28.3468 curveto

 -15.6557 28.3468 -28.3468 15.6557 -28.3468 0.0 curveto

 -28.3468 -15.6557 -15.6557 -28.3468 0.0 -28.3468 curveto

 15.6557 -28.3468 28.3468 -15.6557 28.3468 0.0 curveto

 closepath

 0.0 0.0 moveto

 pgfstr

 restore

 newpath

 restore

 pgfc


 6860 14395 a Fg(Z)7933 14642 y Fe(5)7527
17212 y(0)8625 15269 y Fc(2)52 b Fa(x)302 b Fd(+)157
b Fc(1)p 8625 15783 2881 56 v 8732 16817 a Fa(x)9415
16579 y Fe(2)10012 16817 y Fd(+)g Fc(1)11756 16050 y
Fa(d)91 b(x)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
10000 27024 a

 10000 27024 a 10000 27024 a


 pgfo

 save

 0.775 0.1 0.325 setrgbcolor

 0.3985 pgfw

 save

 restore

 save

 -28.3468 0.0 moveto

 -26.155 0.0 moveto

 -26.155 1.2105 -27.13629 2.1918 -28.3468 2.1918 curveto

 -29.55731 2.1918 -30.5386 1.2105 -30.5386 0.0 curveto

 -30.5386 -1.2105 -29.55731 -2.1918 -28.3468 -2.1918 curveto

 -27.13629 -2.1918 -26.155 -1.2105 -26.155 0.0 curveto

 closepath

 -28.3468 0.0 moveto

 pgfstr

 -14.17339 0.0 moveto

 -11.98158 0.0 moveto

 -11.98158 1.2105 -12.96289 2.1918 -14.17339 2.1918 curveto

 -15.3839 2.1918 -16.36519 1.2105 -16.36519 0.0 curveto

 -16.36519 -1.2105 -15.3839 -2.1918 -14.17339 -2.1918 curveto

 -12.96289 -2.1918 -11.98158 -1.2105 -11.98158 0.0 curveto

 closepath

 -14.17339 0.0 moveto

 pgfstr

 0.0 0.0 moveto

 2.1918 0.0 moveto

 2.1918 1.2105 1.2105 2.1918 0.0 2.1918 curveto

 -1.2105 2.1918 -2.1918 1.2105 -2.1918 0.0 curveto

 -2.1918 -1.2105 -1.2105 -2.1918 0.0 -2.1918 curveto

 1.2105 -2.1918 2.1918 -1.2105 2.1918 0.0 curveto

 closepath

 0.0 0.0 moveto

 pgfstr

 14.17339 0.0 moveto

 16.36519 0.0 moveto

 16.36519 1.2105 15.3839 2.1918 14.17339 2.1918 curveto

 12.96289 2.1918 11.98158 1.2105 11.98158 0.0 curveto

 11.98158 -1.2105 12.96289 -2.1918 14.17339 -2.1918 curveto

 15.3839 -2.1918 16.36519 -1.2105 16.36519 0.0 curveto

 closepath

 14.17339 0.0 moveto

 pgfstr

 28.3468 0.0 moveto

 30.5386 0.0 moveto

 30.5386 1.2105 29.55731 2.1918 28.3468 2.1918 curveto

 27.13629 2.1918 26.155 1.2105 26.155 0.0 curveto

 26.155 -1.2105 27.13629 -2.1918 28.3468 -2.1918 curveto

 29.55731 -2.1918 30.5386 -1.2105 30.5386 0.0 curveto

 closepath

 28.3468 0.0 moveto

 pgfstr

 save
 0.8 0.2 0.4
TeXcolorrgb
 -28.3468 0.0 moveto

 -26.85239 0.0 moveto

 -26.85239 0.82533 -27.52145 1.49442 -28.3468 1.49442 curveto

 -29.17215 1.49442 -29.84122 0.82533 -29.84122 0.0 curveto

 -29.84122 -0.82533 -29.17215 -1.49442 -28.3468 -1.49442 curveto

 -27.52145 -1.49442 -26.85239 -0.82533 -26.85239 0.0 curveto

 closepath

 -28.3468 0.0 moveto

 pgffill
 0 TeXcolorgray
 restore

 save
 0.8 0.2 0.4 TeXcolorrgb
 -14.17339 0.0 moveto

 -12.67897 0.0 moveto

 -12.67897 0.82533 -13.34804 1.49442 -14.17339 1.49442 curveto

 -14.99873 1.49442 -15.6678 0.82533 -15.6678 0.0 curveto

 -15.6678 -0.82533 -14.99873 -1.49442 -14.17339 -1.49442 curveto

 -13.34804 -1.49442 -12.67897 -0.82533 -12.67897 0.0 curveto

 closepath

 -14.17339 0.0 moveto

 pgffill
 0
TeXcolorgray
 restore

 save
 0.8 0.2 0.4 TeXcolorrgb
 0.0 0.0 moveto

 1.49442 0.0 moveto

 1.49442 0.82533 0.82533 1.49442 0.0 1.49442 curveto

 -0.82533 1.49442 -1.49442 0.82533 -1.49442 0.0 curveto

 -1.49442 -0.82533 -0.82533 -1.49442 0.0 -1.49442 curveto

 0.82533 -1.49442 1.49442 -0.82533 1.49442 0.0 curveto

 closepath

 0.0 0.0 moveto

 pgffill
 0 TeXcolorgray
 restore

 restore

 newpath

 restore

 pgfc


 0.775 0.1 0.325
TeXcolorrgb eop end
%%Page: 2 2
TeXDict begin 2 1 bop gsave 1 0.925 0.85 TeXcolorrgb
clippath fill grestore 0.775 0.1 0.325 TeXcolorrgb 0
TeXcolorgray 0.8 0.2 0.4 TeXcolorrgb 7145 -6127 a
 currentpoint currentpoint translate 0.75 0.75 scale neg exch neg exch
translate
 7145
-6127 a Fh(210522M2300)7145 -6127 y
 currentpoint currentpoint translate 1 0.75 div 1 0.75 div scale neg
exch neg exch translate
 7145 -6127 a 0 TeXcolorgray
0.775 0.1 0.325 TeXcolorrgb -3820 9638 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   gsave /xGridOffset
0.0 def /yGridOffset 0.0 def /GridDX 1 def /GridDY 1 def  1. revision
952 gt { .setstrokeconstantalpha }{ .setopacityalpha } ifelse  0.8
SLW 0.75  setgray 0.0 0.0 113.81097 113.81097 0.0 0.0 28.45274 abs
28.45274 abs 1 10 { 0  setgray } 8.0 /NimbusSanL-Regu findfont 8.0
scalefont setfont Grid grestore  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor   56.90549 56.90549
56.90549   1. .setopacityalpha  SD  end
 
@endspecial
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 10000 27024
a

 10000 27024 a 10000 27024 a


 pgfo

 save

 0.775 0.1 0.325 setrgbcolor

 0.3985 pgfw

 save

 restore

 save

 -28.3468 0.0 moveto

 -26.155 0.0 moveto

 -26.155 1.2105 -27.13629 2.1918 -28.3468 2.1918 curveto

 -29.55731 2.1918 -30.5386 1.2105 -30.5386 0.0 curveto

 -30.5386 -1.2105 -29.55731 -2.1918 -28.3468 -2.1918 curveto

 -27.13629 -2.1918 -26.155 -1.2105 -26.155 0.0 curveto

 closepath

 -28.3468 0.0 moveto

 pgfstr

 -14.17339 0.0 moveto

 -11.98158 0.0 moveto

 -11.98158 1.2105 -12.96289 2.1918 -14.17339 2.1918 curveto

 -15.3839 2.1918 -16.36519 1.2105 -16.36519 0.0 curveto

 -16.36519 -1.2105 -15.3839 -2.1918 -14.17339 -2.1918 curveto

 -12.96289 -2.1918 -11.98158 -1.2105 -11.98158 0.0 curveto

 closepath

 -14.17339 0.0 moveto

 pgfstr

 0.0 0.0 moveto

 2.1918 0.0 moveto

 2.1918 1.2105 1.2105 2.1918 0.0 2.1918 curveto

 -1.2105 2.1918 -2.1918 1.2105 -2.1918 0.0 curveto

 -2.1918 -1.2105 -1.2105 -2.1918 0.0 -2.1918 curveto

 1.2105 -2.1918 2.1918 -1.2105 2.1918 0.0 curveto

 closepath

 0.0 0.0 moveto

 pgfstr

 14.17339 0.0 moveto

 16.36519 0.0 moveto

 16.36519 1.2105 15.3839 2.1918 14.17339 2.1918 curveto

 12.96289 2.1918 11.98158 1.2105 11.98158 0.0 curveto

 11.98158 -1.2105 12.96289 -2.1918 14.17339 -2.1918 curveto

 15.3839 -2.1918 16.36519 -1.2105 16.36519 0.0 curveto

 closepath

 14.17339 0.0 moveto

 pgfstr

 28.3468 0.0 moveto

 30.5386 0.0 moveto

 30.5386 1.2105 29.55731 2.1918 28.3468 2.1918 curveto

 27.13629 2.1918 26.155 1.2105 26.155 0.0 curveto

 26.155 -1.2105 27.13629 -2.1918 28.3468 -2.1918 curveto

 29.55731 -2.1918 30.5386 -1.2105 30.5386 0.0 curveto

 closepath

 28.3468 0.0 moveto

 pgfstr

 save
 0.8 0.2 0.4 TeXcolorrgb
 -28.3468 0.0 moveto

 -26.85239 0.0 moveto

 -26.85239 0.82533 -27.52145 1.49442 -28.3468 1.49442 curveto

 -29.17215 1.49442 -29.84122 0.82533 -29.84122 0.0 curveto

 -29.84122 -0.82533 -29.17215 -1.49442 -28.3468 -1.49442 curveto

 -27.52145 -1.49442 -26.85239 -0.82533 -26.85239 0.0 curveto

 closepath

 -28.3468 0.0 moveto

 pgffill

0 TeXcolorgray
 restore

 save
 0.8 0.2 0.4 TeXcolorrgb
 -14.17339 0.0 moveto

 -12.67897 0.0 moveto

 -12.67897 0.82533 -13.34804 1.49442 -14.17339 1.49442 curveto

 -14.99873 1.49442 -15.6678 0.82533 -15.6678 0.0 curveto

 -15.6678 -0.82533 -14.99873 -1.49442 -14.17339 -1.49442 curveto

 -13.34804 -1.49442 -12.67897 -0.82533 -12.67897 0.0 curveto

 closepath

 -14.17339 0.0 moveto

 pgffill
 0 TeXcolorgray
 restore

 save

0.8 0.2 0.4 TeXcolorrgb
 0.0 0.0 moveto

 1.49442 0.0 moveto

 1.49442 0.82533 0.82533 1.49442 0.0 1.49442 curveto

 -0.82533 1.49442 -1.49442 0.82533 -1.49442 0.0 curveto

 -1.49442 -0.82533 -0.82533 -1.49442 0.0 -1.49442 curveto

 0.82533 -1.49442 1.49442 -0.82533 1.49442 0.0 curveto

 closepath

 0.0 0.0 moveto

 pgffill
 0 TeXcolorgray
 restore

 restore

 newpath

 restore

 pgfc


 0.775 0.1 0.325
TeXcolorrgb eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
